#+STARTUP: showeverything
#+title: Analyzing Financial Data and Implementing Financial Models Using R

* Chapter 3: Portfolio Returns

** 3.1 Constructing Portfolio Returns (Long Way)

*** Step 1: Find First and Last Adjusted Closing Price for Each Security Over the Investment Period

#+begin_src R
  library(quantmod)
  library(xts)

  data_amzn <- readRDS("./data/amzn.rds")
  data_ibm <- readRDS("./data/ibm.rds")
  data_gspc <- readRDS("./data/gspc.rds")

  multi <- data_amzn[, "AMZN.Adjusted"]
  multi <- merge(multi, data_gspc[, "GSPC.Adjusted"])
  multi <- merge(multi, data_ibm[, "IBM.Adjusted"])

  period_ret <- multi[c(1, nrow(multi)), ]

  > period_ret
             AMZN.Adjusted GSPC.Adjusted IBM.Adjusted
  2010-12-31        180.00       1257.64     105.5844
  2013-12-31        398.79       1848.36     142.2446
#+end_src

*** Step 2: Calculate Returns for Each Security Over the Investment Period

#+begin_src R
  rets <- lapply(period_ret, Delt)

  > rets
  $AMZN.Adjusted
             Delt.1.arithmetic
  2010-12-31                NA
  2013-12-31            1.2155

  $GSPC.Adjusted
             Delt.1.arithmetic
  2010-12-31                NA
  2013-12-31         0.4697051

  $IBM.Adjusted
             Delt.1.arithmetic
  2010-12-31    
              NA
  2013-12-31         0.3472124
#+end_src

*** Step 3: Convert to a data.frame and Cleanup Data

#+begin_src R
  rets <- data.frame(rets)

  > rets
             Delt.1.arithmetic Delt.1.arithmetic.1 Delt.1.arithmetic.2
  2010-12-31                NA                  NA                  NA
  2013-12-31            1.2155           0.4697051           0.3472124

  rets <- rets[2, ] * 100

  names(rets) <- paste(c("AMZN", "GSPC", "IBM"))
  > rets
               AMZN     GSPC      IBM
  2013-12-31 121.55 46.97051 34.72124
#+end_src

*** Step 4: Calculate Weight of Each Security in the Portfolio

#+begin_src R
  i_amzn <- 50000
  i_gspc <- 40000
  i_ibm <- 10000

  total <- i_amzn + i_gspc + i_ibm

  w_amzn <- i_amzn / total
  > w_amzn
  [1] 0.5

  w_gspc <- i_gspc / total
  > w_gspc
  [1] 0.4

  w_ibm <- i_ibm / total
  > w_ibm
  [1] 0.1
#+end_src

*** Step 5: Calculate Portfolio Return

#+begin_src R
  port_ret_4asset <- w_amzn * rets$AMZN + w_gspc * rets$GSPC + w_ibm * rets$IBM

  > port_ret_4asset
  [1] 83.03533
#+end_src

** 3.2 Constructing Portfolio Returns (Matrix Algebra)

#+begin_src R
  wgt <- c(0.5, 0.1, 0.3, 0.1)
  mat_wgt <- matrix(wgt, 1)
  > mat_wgt
       [,1] [,2] [,3]
  [1,]  0.5  0.4  0.1

  ret <- c(rets$AMZN, rets$GSPC, rets$IBM)
  > ret
  [1] 121.55001  46.97051  34.7212

  mat_ret <- matrix(ret, 3)
  > mat_ret
            [,1]
  [1,] 121.55001
  [2,]  46.97051
  [3,]  34.72124

  port_ret <- mat_wgt %*% mat_ret
  > port_ret
           [,1]
  [1,] 83.03533
#+end_src

** 3.3 Constructing Benchmark Portfolio Returns

*** Step 1: Importing the Price Data

#+begin_src R
  > data_amzn[c(1:3, nrow(data_amzn)), ]
             AMZN.Open AMZN.High AMZN.Low AMZN.Close AMZN.Volume AMZN.Adjusted
  2010-12-31    181.96    182.30   179.51     180.00     3451900        180.00
  2011-01-03    181.37    186.00   181.21     184.22     5331400        184.22
  2011-01-04    186.15    187.70   183.78     185.01     5031800        185.01
  2013-12-31    394.58    398.83   393.80     398.79     1996500        398.79

  > data_ibm[c(1:3, nrow(data_ibm)), ]
              IBM.Open IBM.High IBM.Low IBM.Close IBM.Volume IBM.Adjusted
  2010-12-31   146.73   147.07  145.96    146.76    2969800     105.5844
  2011-01-03   147.21   148.20  147.14    147.48    4603800     106.1024
  2011-01-04   147.56   148.22  146.64    147.64    5060100     106.2175
  2013-12-31   186.49   187.79  186.30    187.57    3619700     142.2446
#+end_src

*** Step 2: Create Object with Only the Relevant Data

#+begin_src R
  port$amzn_ret <- Delt(port$AMZN.Adjusted)
  port$ibm_ret <- Delt(port$IBM.Adjusted)

  > port[c(1:3, nrow(port)), ]
             AMZN.Close AMZN.Adjusted IBM.Close IBM.Adjusted
  2010-12-31     180.00        180.00    146.76     105.5844
  2011-01-03     184.22        184.22    147.48     106.1024
  2011-01-04     185.01        185.01    147.64     106.2175
  2013-12-31     398.79        398.79    187.57     142.2446
#+end_src

*** Step 3: Calculate Returns of Each Security

#+begin_src R
  port$amzn_ret <- Delt(port$AMZN.Adjusted)
  port$ibm_ret <- Delt(port$IBM.Adjusted)

  > port[c(1:3, nrow(port)), ]
             AMZN.Close AMZN.Adjusted IBM.Close IBM.Adjusted    amzn_ret
  2010-12-31     180.00        180.00    146.76     105.5844          NA
  2011-01-03     184.22        184.22    147.48     106.1024 0.023444450
  2011-01-04     185.01        185.01    147.64     106.2175 0.004288318
  2013-12-31     398.79        398.79    187.57     142.2446 0.013778412
                 ibm_ret
  2010-12-31          NA
  2011-01-03 0.004906152
  2011-01-04 0.001084914
  2013-12-31 0.006222904
#+end_src

*** Step 4: Convert to data_frame Object and Subset Data

#+begin_src R
  port <- cbind(data.frame(index(port)), data.frame(port))
  names(port)[1] <- paste("date")

  port <- subset(port, 
                 port$date >= "2012-12-31" &
                 port$date <= "2013-12-31")
  > port[c(1:3, nrow(port)), ]
                   date AMZN.Close AMZN.Adjusted IBM.Close IBM.Adjusted
  2012-12-31 2012-12-31     250.87        250.87    191.55     142.4976
  2013-01-02 2013-01-02     257.31        257.31    196.35     146.0685
  2013-01-03 2013-01-03     258.48        258.48    195.27     145.2650
  2013-12-31 2013-12-31     398.79        398.79    187.57     142.2446
                amzn_ret      ibm_ret
  2012-12-31 0.023207448  0.009060636
  2013-01-02 0.025670679  0.025058876
  2013-01-03 0.004547095 -0.005500612
  2013-12-31 0.013778412  0.006222904
#+end_src

** 3.3.1 Equal-Weighted Portfolio

*** Step 1: Keep Only Variables We Need to Construct EW Portfolio

#+begin_src R
  ewport <- port[c("date", "amzn_ret", "ibm_ret")]
  ewport[c(1:3, nrow(ewport)), ]

  names(ewport) <- paste(c("date", "amzn", "ibm"))
  rownames(ewport) <- seq_len(nrow(ewport))

  > ewport[c(1:3, nrow(ewport)), ]
            date        amzn          ibm
  1   2012-12-31 0.023207448  0.009060636
  2   2013-01-02 0.025670679  0.025058876
  3   2013-01-03 0.004547095 -0.005500612
  253 2013-12-31 0.013778412  0.006222904
#+end_src

*** Step 2: Converting Net Returns to Gross Returns

#+begin_src R
  ewport$amzn <- 1 + ewport$amzn
  ewport$ibm <- 1 + ewport$ibm

  > ewport[c(1:3, nrow(ewport)), ]
            date     amzn       ibm
  1   2012-12-31 1.023207 1.0090606
  2   2013-01-02 1.025671 1.0250589
  3   2013-01-03 1.004547 0.9944994
  253 2013-12-31 1.013778 1.0062229
#+end_src

*** Step 3: Calculate EW Portfolio Values for 1Q 2013

    We would want to include December 31, 2012 because, when we want to
    determine how much we made based on the returns in 2013, we are implicitly
    making the assumption that the investment was made at the closing price on
    the last trading day of 2012 (i.e., December 31, 2012).

    But we are not interested in the return on the 31st. So we set it to 1.

#+begin_src R
  ew_q1 <- subset(
    ewport,
    ewport$date >= as.Date("2012-12-31") &
      ewport$date <= as.Date("2013-03-31")
  )

  > ew_q1[c(1:3, nrow(ew_q1)), ]
           date     amzn       ibm
  1  2012-12-31 1.023207 1.0090606
  2  2013-01-02 1.025671 1.0250589
  3  2013-01-03 1.004547 0.9944994
  61 2013-03-28 1.004485 1.0114279

  ew_q1[1, c("amzn", "ibm")] <- 1
  ew_q1$amzn <- cumprod(ew_q1$amzn)
  ew_q1$ibm <- cumprod(ew_q1$ibm)

  > ew_q1[c(1:3, nrow(ew_q1)), ]
           date     amzn      ibm
  1  2012-12-31 1.000000 1.000000
  2  2013-01-02 1.025671 1.025059
  3  2013-01-03 1.030335 1.019420
  61 2013-03-28 1.062263 1.118235

  num_sec <- 2

  ew_q1$amzn_idx <- (1 / num_sec) * ew_q1$amzn
  ew_q1$ibm_idx <- (1 / num_sec) * ew_q1$ibm

  > ew_q1[c(1:3, nrow(ew_q1)), ]
           date     amzn      ibm  amzn_idx   ibm_idx
  1  2012-12-31 1.000000 1.000000 0.5000000 0.5000000
  2  2013-01-02 1.025671 1.025059 0.5128353 0.5125294
  3  2013-01-03 1.030335 1.019420 0.5151673 0.5097102
  61 2013-03-28 1.062263 1.118235 0.5311317 0.5591173

  q1_val <- data.frame(rowSums(ew_q1[, c("amzn_idx", "ibm_idx")]))

  > q1_val[c(1:3, nrow(q1_val)), ]
  [1] 1.000000 1.025365 1.024877 1.090249

  names(q1_val) <- paste("port_val")
  q1_val$date <- ew_q1$date

  > q1_val[c(1:3, nrow(q1_val)), ]
     port.val       date
  1  1.000000 2012-12-31
  2  1.025365 2013-01-02
  3  1.024877 2013-01-03
  61 1.090249 2013-03-28

  q2_inv <- q1_val[nrow(q1_val), 1]

  > q2_inv
  [1] 1.090249
#+end_src

*** Step 4: Calculate EW Portfolio Values for 2Q 2013

    The purpose of ~q1.val~ is to hold the portfolio values for the first quarter.
    We will then combine all quarterly portfolio values at the end so that we
    have a complete series of EW portfolio values. ~q2.inv~ is created to hold the
    aggregate portfolio value at the end of the first quarter. This value will
    be redistributed equally among the three stocks at the beginning of the
    second quarter. As such, we will use ~q2.inv~ value of $1.090249 in the second
    quarter calculations as the starting investment value instead of $ 1.

#+begin_src R
  ew_q2 <- subset(
    ewport,
    ewport$date >= as.Date("2013-04-01") &
    ewport$date <= as.Date("2013-06-30")
  )
  > ew_q2[c(1:3, nrow(ew_q2)), ]
             date      amzn       ibm
  62  2013-04-01 0.9816878 0.9956871
  63  2013-04-02 1.0065365 1.0093225
  64  2013-04-03 0.9837080 0.9920697
  125 2013-06-28 1.0005045 0.9767957

  ew_q2$amzn <- cumprod(ew_q2$amzn)
  ew_q2$ibm <- cumprod(ew_q2$ibm)
  > ew_q2[c(1:3, nrow(ew_q2)), ]
            date      amzn       ibm
  62  2013-04-01 0.9816878 0.9956871
  63  2013-04-02 0.9700104 1.0006351
  64  2013-04-03 0.9428564 0.9976329
  125 2013-06-28 0.9529941 0.0605176

  ew_q2$amzn_idx <- (q2_inv / num_sec) * ew_q2$amzn
  ew_q2$ibm_idx <- (q2_inv / num_sec) * ew_q2$ibm
  > ew_q2[c(1:3, nrow(ew_q2)), ]
            date      amzn       ibm  amzn_idx    ibm_idx
  62  2013-04-01 0.9816878 0.9956871 0.5351421 0.54277340
  63  2013-04-02 0.9700104 1.0006351 0.5287764 0.54547067
  64  2013-04-03 0.9428564 0.9976329 0.5139741 0.54383408
  125 2013-06-28 0.9529941 0.0605176 0.5195004 0.03298962

  q2_val <- data.frame(rowSums(ew_q2[, c("amzn_idx", "ibm_idx")]))
  > q2_val[c(1:3, nrow(q2_val)), ]
  [1] 1.077915 1.074247 1.057808 0.552409

  q2_val <- data.frame(rowSums(ew_q2[, c("amzn_idx", "ibm_idx")]))
  > q2_val[c(1:3, nrow(q2_val)), ]
  [1] 0.55249

  q3_inv <- q2_val[nrow(q2_val), 1]
  > q3_inv
  [1] 0.55249
#+end_src

*** Step 5: Calculate EW Portfolio Values for 3Q 2013

#+begin_src R
  ew_q3 <- subset(
    ewport,
    ewport$date >= as.Date("2013-07-01") &
      ewport$date <= as.Date("2013-09-30")
  )

  > ew_q3[c(1:3, nrow(ew_q3)), ]
            date      amzn       ibm
  126 2013-07-01 1.0158810 1.0008893
  127 2013-07-02 1.0057781 1.0011502
  128 2013-07-03 1.0010573 1.0091383
  189 2013-09-30 0.9893358 0.9906911

  ew_q3$amzn <- cumprod(ew_q3$amzn)
  ew_q3$ibm <- cumprod(ew_q3$ibm)

  > ew_q3[c(1:3, nrow(ew_q3)), ]
            date     amzn       ibm
  126 2013-07-01 1.015881 1.0008893
  127 2013-07-02 1.021751 1.0020406
  128 2013-07-03 1.022831 1.0111976
  189 2013-09-30 1.125860 0.9738145

  ew_q3$amzn_idx <- (q3_inv / num_sec) * ew_q3$amzn
  ew_q3$ibm_idx <- (q3_inv / num_sec) * ew_q3$ibm

  > ew_q3[c(1:3, nrow(ew_q3)), ]
            date     amzn       ibm  amzn_idx   ibm_idx
  126 2013-07-01 1.015881 1.0008893 0.2806321 0.2764907
  127 2013-07-02 1.021751 1.0020406 0.2822536 0.2768087
  128 2013-07-03 1.022831 1.0111976 0.2825520 0.2793383
  189 2013-09-30 1.125860 0.9738145 0.3110131 0.2690114

  q3_val <- data.frame(rowSums(ew_q3[, c("amzn_idx", "ibm_idx")]))

  > q3_val[c(1:3, nrow(q3_val)), ]
  [1] 0.5571227 0.5590623 0.5618903 0.5800245

  names(q3_val) <- paste("port_val")
  q3_val$date <- ew_q3$date

  > q3_val[c(1:3, nrow(q3_val)), ]
       port_val       date
  126 0.5571227 2013-07-01
  127 0.5590623 2013-07-02
  128 0.5618903 2013-07-03
  189 0.5800245 2013-09-30

  q4_inv <- q3_val[nrow(q3_val), 1]

  > q4_inv
  [1] 0.5800245
#+end_src

*** Step 6: Calculate EW Portfolio Values for 4Q 2013

#+begin_src R
  ew_q4 <- subset(
    ewport,
    ewport$date >= as.Date("2013-10-01") &
      ewport$date <= as.Date("2013-12-31")
  )

  > ew_q4[c(1:3, nrow(ew_q4)), ]
            date      amzn       ibm
  190 2013-10-01 1.0265801 1.0064803
  191 2013-10-02 0.9986291 0.9923810
  192 2013-10-03 0.9820598 0.9940527
  253 2013-12-31 1.0137784 1.0062229

  ew_q4$amzn <- cumprod(ew_q4$amzn)
  ew_q4$ibm <- cumprod(ew_q4$ibm)

  > ew_q4[c(1:3, nrow(ew_q4)), ]
            date     amzn       ibm
  190 2013-10-01 1.026580 1.0064803
  191 2013-10-02 1.025173 0.9988119
  192 2013-10-03 1.006781 0.9928717
  253 2013-12-31 1.275557 1.0183460

  ew_q4$amzn_idx <- (q4_inv / num_sec) * ew_q4$amzn
  ew_q4$ibm_idx <- (q4_inv / num_sec) * ew_q4$ibm

  > ew_q4[c(1:3, nrow(ew_q4)), ]
            date     amzn       ibm  amzn_idx   ibm_idx
  190 2013-10-01 1.026580 1.0064803 0.2977208 0.2918916
  191 2013-10-02 1.025173 0.9988119 0.2973127 0.2896677
  192 2013-10-03 1.006781 0.9928717 0.2919788 0.2879450
  253 2013-12-31 1.275557 1.0183460 0.3699270 0.2953328

  q4_val <- data.frame(rowSums(ew_q4[, c("amzn_idx", "ibm_idx")]))

  > q4_val[c(1:3, nrow(q4_val)), ]
  [1] 0.5896125 0.5869804 0.5799238 0.6652599

  names(q4_val) <- paste("port_val")
  q4_val$date <- ew_q4$date

  > q4_val[c(1:3, nrow(q4_val)), ]
       port_val       date
  190 0.5896125 2013-10-01
  191 0.5869804 2013-10-02
  192 0.5799238 2013-10-03
  253 0.6652599 2013-12-31
#+end_src

*** Step 7: Combine Quarterly EW Portfolio Values into One Data Object

#+begin_src R
  ew_portval <- rbind(q1_val, q2_val, q3_val, q4_val)

  > ew_portval[c(1:3, nrow(ew_portval)), ]
       port_val       date
  1   1.0000000 2012-12-31
  2   1.0253648 2013-01-02
  3   1.0248775 2013-01-03
  253 0.6652599 2013-12-31
#+end_src

** 3.3.2 Value-Weighted Portfolio

*** Step 1: Keep Only Variables We Need to Construct VW Portfolio

#+begin_src R
  vwport <- port[, c("date", "AMZN.Close", "IBM.Close", "amzn_ret", "ibm_ret")]

  > vwport[c(1:3, nrow(vwport)), ]
                   date AMZN.Close IBM.Close    amzn_ret      ibm_ret
  2012-12-31 2012-12-31     250.87    191.55 0.023207448  0.009060636
  2013-01-02 2013-01-02     257.31    196.35 0.025670679  0.025058876
  2013-01-03 2013-01-03     258.48    195.27 0.004547095 -0.005500612
  2013-12-31 2013-12-31     398.79    187.57 0.013778412  0.006222904
#+end_src

*** Step 2: Converting Net Returns to Gross Returns

#+begin_src R
  vwport$amzn_ret <- 1 + vwport$amzn_ret
  vwport$ibm_ret <- 1 + vwport$ibm_ret

  > vwport[c(1:3, nrow(vwport)), ]
                   date AMZN.Close IBM.Close amzn_ret   ibm_ret
  2012-12-31 2012-12-31     250.87    191.55 1.023207 1.0090606
  2013-01-02 2013-01-02     257.31    196.35 1.025671 1.0250589
  2013-01-03 2013-01-03     258.48    195.27 1.004547 0.9944994
  2013-12-31 2013-12-31     398.79    187.57 1.013778 1.0062229
#+end_src

*** Step 3: Calculate the Market Capitalization of Each Security in the Portfolio

**** Construct Series of Calendar Days

     Since the end of the quarter may not be a trading day, we should create a
     date series that contains all calendar days between December 31, 2012 to
     December 31, 2013. Note that the output shows we have dates that include
     non-trading days such as January 1, 2013, which is New Year’s Day and is a
     stock market trading holiday.

#+begin_src R
  date <- seq(as.Date("2012-12-31"), as.Date("2013-12-31"), by = 1)
  date <- data.frame(date)

  > date[c(1:3, nrow(date)), ]
  [1] "2012-12-31" "2013-01-01" "2013-01-02" "2013-12-31"
#+end_src

**** Create Data Object With Daily Prices, Filling in Last Available Price on Non-trading Days

     We then merge ~date~ and ~price_qtr~ using a combination of the ~na.locf~ and
     ~merge~ commands. The ~merge~ command combines the two data objects. Using the
     ~all.x=TRUE~ option tells R that when merging we should keep all the data in
     the “by” variable that is available in ~x=date~ data object. The ~by~
     variable in this case is the date. What the ~na.locf~ command does is that it
     copies over the last available data in ~y=price_qtr~ when there is a date in
     ~x~ that is not available in ~y~. For example, recall that there is no trading
     on New Year’s Day, January 1, 2013, so the output below shows data on
     January 1, 2013 which is equal to the closing price on December 31, 2012.
     Going forward, any time there is a weekend or trading holiday, the last
     available value is used.

#+begin_src R
  price_qtr <- vwport[, c("date", "AMZN.Close", "IBM.Close")]

  > price_qtr[c(1:3, nrow(price_qtr)), ]
                   date AMZN.Close IBM.Close
  2012-12-31 2012-12-31     250.87    191.55
  2013-01-02 2013-01-02     257.31    196.35
  2013-01-03 2013-01-03     258.48    195.27
  2013-12-31 2013-12-31     398.79    187.57

  price_qtr <- na.locf(
    merge(
      x = date,
      y = price_qtr,
      by = "date",
      all.x = TRUE
    )
  )

  > price_qtr[c(1:3, nrow(price_qtr)), ]
            date AMZN.Close IBM.Close
  1   2012-12-31     250.87    191.55
  2   2013-01-01     250.87    191.55
  3   2013-01-02     257.31    196.35
  366 2013-12-31     398.79    187.57
#+end_src

**** Keep Only Prices at the End of Each Calendar Quarter

#+begin_src R
  price_qtr <- subset(
    price_qtr,
    price_qtr$date == as.Date("2012-12-31") |
    price_qtr$date == as.Date("2013-03-31") |
      price_qtr$date == as.Date("2013-06-30") |
      price_qtr$date == as.Date("2013-09-30")
  )

  > price_qtr
            date AMZN.Close IBM.Close
  1   2012-12-31     250.87    191.55
  91  2013-03-31     266.49    213.30
  182 2013-06-30     277.69    191.11
  274 2013-09-30     312.64    185.18
#+end_src

**** Obtain Shares Outstanding Data from SEC Filings

     Obtain Shares Outstanding Data from SEC Filings The quarter-end shares out-
     standing are obtained from the SEC EDGAR database.

#+begin_src R
  price_qtr$amzn_shout <- c(454000000, 455000000, 457000000, 458000000)
  price_qtr$ibm_shout <- c(1117367676, 1108794396, 1095425823, 1085854383)

  > price_qtr
            date AMZN.Close IBM.Close amzn_shout ibm_shout
  1   2012-12-31     250.87    191.55   4.54e+08 1117367676
  91  2013-03-31     266.49    213.30   4.55e+08 1108794396
  182 2013-06-30     277.69    191.11   4.57e+08 1095425823
  274 2013-09-30     312.64    185.18   4.58e+08 1085854383
#+end_src

**** Calculate Market Capitalization of Each Security

#+begin_src R
  > str(price_qtr)
  'data.frame':	4 obs. of  6 variables:
   $ date      : Date, format: "2012-12-31" "2013-03-31" ...
   $ AMZN.Close: num  251 266 278 313
   $ IBM.Close : num  192 213 191 185
   $ amzn_shout: num  4.54e+08 4.55e+08 4.57e+08 4.58e+08
   $ ibm_shout : num  1.12e+09 1.11e+09 1.10e+09 1.09e+09

  price_qtr$date <- as.Date(price_qtr$date)
  price_qtr$amzn_close <- as.numeric(price_qtr$AMZN.Close)
  price_qtr$ibm_close <- as.numeric(price_qtr$IBM.Close)

  > str(price_qtr)
  'data.frame':	4 obs. of  8 variables:
   $ date      : Date, format: "2012-12-31" "2013-03-31" ...
   $ AMZN.Close: num  251 266 278 313
   $ IBM.Close : num  192 213 191 185
   $ amzn_shout: num  4.54e+08 4.55e+08 4.57e+08 4.58e+08
   $ ibm_shout : num  1.12e+09 1.11e+09 1.10e+09 1.09e+09
   $ amzn_close: num  251 266 278 313
   $ ibm_close : num  192 213 191 185

  weights <- price_qtr
  weights$amzn_mcap <- weights$amzn_close * weights$amzn_shout
  weights$ibm_mcap <- weights$ibm_close * weights$ibm_shout
#+end_src

**** Calculate Quarter-end Aggregate Market Capitalization

#+begin_src R
  weights$tot_mcap <- rowSums(weights[c("amzn_mcap", "ibm_mcap")])

  > weights
            date AMZN.Close IBM.Close amzn_shout  ibm_shout amzn_close ibm_close
  1   2012-12-31     250.87    191.55   4.54e+08 1117367676     250.87    191.55
  91  2013-03-31     266.49    213.30   4.55e+08 1108794396     266.49    213.30
  182 2013-06-30     277.69    191.11   4.57e+08 1095425823     277.69    191.11
  274 2013-09-30     312.64    185.18   4.58e+08 1085854383     312.64    185.18
         amzn_mcap     ibm_mcap     tot_mcap
  1   113894977730 214031781690 327926759420
  91  121252945450 236505847993 357758793443
  182 126904330914 209346830129 336251161043
  274 143189126870 201078507043 344267633913
#+end_src

*** Step 4: Calculate Quarter-end Weights of Each Security in the Portfolio

#+begin_src R
  weights$amzn_wgt <- weights$amzn_mcap / weights$tot_mcap
  weights$ibm_wgt <- weights$ibm_mcap / weights$tot_mcap

  > weights
            date AMZN.Close IBM.Close amzn_shout  ibm_shout amzn_close ibm_close
  1   2012-12-31     250.87    191.55   4.54e+08 1117367676     250.87    191.55
  91  2013-03-31     266.49    213.30   4.55e+08 1108794396     266.49    213.30
  182 2013-06-30     277.69    191.11   4.57e+08 1095425823     277.69    191.11
  274 2013-09-30     312.64    185.18   4.58e+08 1085854383     312.64    185.18
         amzn_mcap     ibm_mcap     tot_mcap  amzn_wgt   ibm_wgt
  1   113894977730 214031781690 327926759420 0.3473183 0.6526817
  91  121252945450 236505847993 357758793443 0.3389237 0.6610763
  182 126904330914 209346830129 336251161043 0.3774093 0.6225907
  274 143189126870 201078507043 344267633913 0.4159239 0.5840761

  weight <- weights[, c("date", "amzn_wgt", "ibm_wgt")]
  > weight
            date  amzn_wgt   ibm_wgt
  1   2012-12-31 0.3473183 0.6526817
  91  2013-03-31 0.3389237 0.6610763
  182 2013-06-30 0.3774093 0.6225907
  274 2013-09-30 0.4159239 0.5840761

  weight$date <- weight$date + 1
  > weight
            date  amzn_wgt   ibm_wgt
  1   2013-01-01 0.3473183 0.6526817
  91  2013-04-01 0.3389237 0.6610763
  182 2013-07-01 0.3774093 0.6225907
  274 2013-10-01 0.4159239 0.5840761
#+end_src

*** Step 5: Calculating the Quarterly VW Portfolio Values

#+begin_src R
  date <- seq(as.Date("2012-12-31"), as.Date("2013-12-31"), by = 1)
  date <- data.frame(date)
  > date[c(1:3, nrow(date)), ]
  [1] "2012-12-31" "2013-01-01" "2013-01-02" "2013-12-31"

  vwret <- na.locf(merge(date, weight, by = "date", all.x = TRUE))
  > vwret[c(1:3, nrow(vwret)), ]
            date  amzn_wgt   ibm_wgt
  2   2013-01-01 0.3473183 0.6526817
  3   2013-01-02 0.3473183 0.6526817
  4   2013-01-03 0.3473183 0.6526817
  366 2013-12-31 0.4159239 0.5840761
#+end_src

*** Step 6: Create Pie Charts of the Weights

#+begin_src R
  > str(vwret)
  'data.frame':	365 obs. of  3 variables:
   $ date    : Date, format: "2013-01-01" "2013-01-02" ...
   $ amzn_wgt: num  0.347 0.347 0.347 0.347 0.347 ...
  $ ibm_wgt : num  0.653 0.653 0.653 0.653 0.653 ...
   - attr(*, "na.action")= 'omit' Named int 1
    ..- attr(*, "names")= chr "1"

  vwret$date <- as.Date(vwret$date)
  vwret$amzn_wgt <- as.numeric(vwret$amzn_wgt)
  vwret$ibm_wgt <- as.numeric(vwret$ibm_wgt)
  > vwret[c(1:3, nrow(vwret)), ]
            date  amzn_wgt   ibm_wgt
  2   2013-01-01 0.3473183 0.6526817
  3   2013-01-02 0.3473183 0.6526817
  4   2013-01-03 0.3473183 0.6526817
  366 2013-12-31 0.4159239 0.5840761

  > str(vwret)
  'data.frame':	365 obs. of  3 variables:
   $ date    : Date, format: "2013-01-01" "2013-01-02" ...
   $ amzn_wgt: num  0.347 0.347 0.347 0.347 0.347 ...
   $ ibm_wgt : num  0.653 0.653 0.653 0.653 0.653 ...
   - attr(*, "na.action")= 'omit' Named int 1
    ..- attr(*, "names")= chr "1"

  q1_vw_wgt <- subset(vwret, vwret$date == as.Date("2013-01-01"))

  > q1_vw_wgt
          date  amzn_wgt   ibm_wgt
  2 2013-01-01 0.3473183 0.6526817

  q2_vw_wgt <- subset(vwret, vwret$date == as.Date("2013-04-01"))

  > q2_vw_wgt
           date  amzn_wgt   ibm_wgt
  92 2013-04-01 0.3389237 0.6610763

  q3_vw_wgt <- subset(vwret, vwret$date == as.Date("2013-07-01"))

  > q3_vw_wgt
           date  amzn_wgt   ibm_wgt
  92 2013-04-01 0.3389237 0.6610763

  q3_vw_wgt <- subset(vwret, vwret$date == as.Date("2013-07-01"))

  > q3_vw_wgt
            date  amzn_wgt   ibm_wgt
  183 2013-07-01 0.3774093 0.6225907

  q4_vw_wgt <- subset(vwret, vwret$date == as.Date("2013-10-01"))

  > q4_vw_wgt
            date  amzn_wgt   ibm_wgt
  275 2013-10-01 0.4159239 0.5840761
#+end_src

#+begin_src R
  par(mfrow = c(2, 2))
  q1_pie_values <- as.numeric(q1_vw_wgt[, -1])
  q1_pie_labels <- names(q1_vw_wgt[, -1])
  pie(q1_pie_values,
      labels = q1_pie_labels,
      col = rainbow(length(q4_pie_labels)),
      main = "Q1 Value Weighting")

  q2_pie_values <- as.numeric(q2_vw_wgt[, -1])
  q2_pie_labels <- names(q1_vw_wgt[, -1])
  pie(q2_pie_values,
      labels = q2_pie_labels,
      col = rainbow(length(q4_pie_labels)),
      main = "q2 Value Weighting")

  q3_pie_values <- as.numeric(q3_vw_wgt[, -1])
  q3_pie_labels <- c("Amazon", "IBM")
  pct <- round(q3_pie_values * 100)
  q3_pie_labels <- paste(q3_pie_labels, pct) # Add Pct to Labels
  q3_pie_labels <- paste(q3_pie_labels, "%", sep = "") # Add % Sign
  pie(q3_pie_values,
      labels = q3_pie_labels,
      col = rainbow(length(q4_pie_labels)),
      main = "Q3 Value Weighting")

  q4_pie_values <- as.numeric(q4_vw_wgt[, -1])
  q4_pie_labels <- c("Amazon", "Yahoo", "IBM")
  pct <- round(q4_pie_values * 100)
  q4_pie_labels <- paste(q4_pie_labels, pct) # Add Pct to Labels
  q4_pie_labels <- paste(q4_pie_labels, "%", sep = "") # Add % Sign
  pie(q4_pie_values,
      labels = q4_pie_labels,
      col = rainbow(length(q4_pie_labels)),
      main = "Q4 Value Weighting")
#+end_src

[[./images/chp03-plot1.png]]

*** Step 7: CalculatingVW PortfolioValues for 1Q 2013

#+begin_src R
  vw_q1 <- subset(vwport[, c("date", "amzn_ret", "ibm_ret")],
                  vwport$date >= as.Date("2012-12-31") &
                  vwport$date <= as.Date("2013-03-31"))

  > vw_q1[c(1:3, nrow(vw_q1)), ]
                   date amzn_ret   ibm_ret
  2012-12-31 2012-12-31 1.023207 1.0090606
  2013-01-02 2013-01-02 1.025671 1.0250589
  2013-01-03 2013-01-03 1.004547 0.9944994
  2013-03-28 2013-03-28 1.004485 1.0114279

  names(vw_q1) <- paste(c("date", "amzn", "ibm"))

  > vw_q1[c(1:3, nrow(vw_q1)), ]
                   date     amzn       ibm
  2012-12-31 2012-12-31 1.023207 1.0090606
  2013-01-02 2013-01-02 1.025671 1.0250589
  2013-01-03 2013-01-03 1.004547 0.9944994
  2013-03-28 2013-03-28 1.004485 1.0114279

  vw_q1[1, c("amzn", "ibm")] <- 1
  vw_q1$amzn <- cumprod(vw_q1$amzn)
  vw_q1$ibm <- cumprod(vw_q1$ibm)

  > vw_q1[c(1:3, nrow(vw_q1)), ]
                   date     amzn      ibm
  2012-12-31 2012-12-31 1.000000 1.000000
  2013-01-02 2013-01-02 1.025671 1.025059
  2013-01-03 2013-01-03 1.030335 1.019420
  2013-03-28 2013-03-28 1.062263 1.118235

  vw_q1$amzn_idx <- (1 * q1_vw_wgt$amzn_wgt) * vw_q1$amzn
  vw_q1$ibm_idx <- (1 * q1_vw_wgt$ibm_wgt) * vw_q1$ibm

  > vw_q1[c(1:3, nrow(vw_q1)), ]
                   date     amzn      ibm  amzn_idx   ibm_idx
  2012-12-31 2012-12-31 1.000000 1.000000 0.3473183 0.6526817
  2013-01-02 2013-01-02 1.025671 1.025059 0.3562342 0.6690371
  2013-01-03 2013-01-03 1.030335 1.019420 0.3578541 0.6653570
  2013-03-28 2013-03-28 1.062263 1.118235 0.3689435 0.7298512

  q1_vw_val <- data.frame(rowSums(vw_q1[, c("amzn_idx", "ibm_idx")]))

  > q1_vw_val[c(1:3, nrow(q1_vw_val)), ]
  [1] 1.000000 1.025271 1.023211 1.098795

  names(q1_vw_val) <- paste("port_val")
  q1_vw_val$date <- vw_q1$date

  > q1_vw_val[c(1:3, nrow(q1_vw_val)), ]
             port_val       date
  2012-12-31 1.000000 2012-12-31
  2013-01-02 1.025271 2013-01-02
  2013-01-03 1.023211 2013-01-03
  2013-03-28 1.098795 2013-03-28

  q2_vw_inv <- q1_vw_val[nrow(q1_vw_val), 1]
  > q2_vw_inv
  [1] 1.098795
#+end_src

*** Step 8: Calculating VW Portfolio Values for 2Q 2013

#+begin_src R
  vw_q2 <- subset(vwport[, c("date", "amzn_ret", "ibm_ret")],
                  vwport$date >= as.Date("2013-04-01") &
                  vwport$date <= as.Date("2013-06-30"))

  names(vw_q2) <- paste(c("date", "amzn", "ibm"))

  > vw_q2[c(1:3, nrow(vw_q2)), ]
                   date      amzn       ibm
  2013-04-01 2013-04-01 0.9816878 0.9956871
  2013-04-02 2013-04-02 1.0065365 1.0093225
  2013-04-03 2013-04-03 0.9837080 0.9920697
  2013-06-28 2013-06-28 1.0005045 0.9767957

  vw_q2$amzn <- cumprod(vw_q2$amzn)
  vw_q2$ibm <- cumprod(vw_q2$ibm)

  > vw_q2[c(1:3, nrow(vw_q2)), ]
                   date      amzn       ibm
  2013-04-01 2013-04-01 0.9816878 0.9956871
  2013-04-02 2013-04-02 0.9881047 1.0049694
  2013-04-03 2013-04-03 0.9720065 0.9969997
  2013-06-28 2013-06-28 1.0420279 0.9001678

  vw_q2$amzn_idx <- (q2_vw_inv * q2_vw_wgt$amzn_wgt) * vw_q2$amzn
  vw_q2$ibm_idx <- (q2_vw_inv * q2_vw_wgt$ibm_wgt) * vw_q2$ibm

  > vw_q2[c(1:3, nrow(vw_q2)), ]
                   date      amzn       ibm  amzn_idx   ibm_idx
  2013-04-01 2013-04-01 0.9816878 0.9956871 0.3655880 0.7232543
  2013-04-02 2013-04-02 0.9881047 1.0049694 0.3679777 0.7299968
  2013-04-03 2013-04-03 0.9720065 0.9969997 0.3619826 0.7242077
  2013-06-28 2013-06-28 1.0420279 0.9001678 0.3880591 0.6538703

  q2_vw_val <- data.frame(rowSums(vw_q2[, c("amzn_idx", "ibm_idx")]))
  > q2_vw_val[c(1:3, nrow(q2_vw_val)), ]
  [1] 1.088842 1.097975 1.086190 1.041929

  names(q2_vw_val) <- paste("port_val")
  q2_vw_val$date <- vw_q2$date

  > q2_vw_val[c(1:3, nrow(q2_vw_val)), ]
             port_val       date
  2013-04-01 1.088842 2013-04-01
  2013-04-02 1.097975 2013-04-02
  2013-04-03 1.086190 2013-04-03
  2013-06-28 1.041929 2013-06-28

  q3_vw_inv <- q2_vw_val[nrow(q2_vw_val), 1]

  > q3_vw_inv
  [1] 1.041929
#+end_src

*** Step 9: Calculating VW Portfolio Values for 3Q 2013

#+begin_src R
  vw_q3 <- subset(vwport[, c("date", "amzn_ret", "ibm_ret")],
                  vwport$date >= as.Date("2013-07-01") &
                  vwport$date <= as.Date("2013-09-30"))
  names(vw_q3) <- paste(c("date", "amzn", "ibm"))

  > vw_q3[c(1:3, nrow(vw_q3)), ]
                   date      amzn       ibm
  2013-07-01 2013-07-01 1.0158810 1.0008893
  2013-07-02 2013-07-02 1.0057781 1.0011502
  2013-07-03 2013-07-03 1.0010573 1.0091383
  2013-09-30 2013-09-30 0.9893358 0.9906911

  vw_q3$amzn <- cumprod(vw_q3$amzn)
  vw_q3$ibm <- cumprod(vw_q3$ibm)
  > vw_q3[c(1:3, nrow(vw_q3)), ]
                   date     amzn       ibm
  2013-07-01 2013-07-01 1.015881 1.0008893
  2013-07-02 2013-07-02 1.021751 1.0020406
  2013-07-03 2013-07-03 1.022831 1.0111976
  2013-09-30 2013-09-30 1.125860 0.9738145

  vw_q3$amzn_idx <- (q3_vw_inv * q3_vw_wgt$amzn_wgt) * vw_q3$amzn
  vw_q3$ibm_idx <- (q3_vw_inv * q3_vw_wgt$ibm_wgt) * vw_q3$ibm
  > vw_q3[c(1:3, nrow(vw_q3)), ]
                   date     amzn       ibm  amzn_idx   ibm_idx
  2013-07-01 2013-07-01 1.015881 1.0008893 0.3994789 0.6492724
  2013-07-02 2013-07-02 1.021751 1.0020406 0.4017871 0.6500192
  2013-07-03 2013-07-03 1.022831 1.0111976 0.4022119 0.6559593
  2013-09-30 2013-09-30 1.125860 0.9738145 0.4427262 0.6317091

  q3_vw_val <- data.frame(rowSums(vw_q3[, c("amzn_idx", "ibm_idx")]))

  > q3_vw_val[c(1:3, nrow(q3_vw_val)), ]
  [1] 1.048751 1.051806 1.058171 1.074435

  names(q3_vw_val) <- paste("port_val")
  q3_vw_val$date <- vw_q3$date

  > q3_vw_val[c(1:3, nrow(q3_vw_val)), ]
             port_val       date
  2013-07-01 1.048751 2013-07-01
  2013-07-02 1.051806 2013-07-02
  2013-07-03 1.058171 2013-07-03
  2013-09-30 1.074435 2013-09-30

  q4_vw_inv <- q3_vw_val[nrow(q3_vw_val), 1]
  > q4_vw_inv
  [1] 1.074435
#+end_src

*** Step 10: Calculating VW Portfolio Values for 4Q 2013

#+begin_src R
  vw_q4 <- subset(vwport[, c("date", "amzn_ret", "ibm_ret")],
                  vwport$date >= as.Date("2013-10-01") &
                  vwport$date <= as.Date("2013-12-31"))

  > vw_q4[c(1:3, nrow(vw_q4)), ]
                   date  amzn_ret   ibm_ret
  2013-10-01 2013-10-01 1.0265801 1.0064803
  2013-10-02 2013-10-02 0.9986291 0.9923810
  2013-10-03 2013-10-03 0.9820598 0.9940527
  2013-12-31 2013-12-31 1.0137784 1.0062229

  names(vw_q4) <- paste(c("date", "amzn", "ibm"))

  > vw_q4[c(1:3, nrow(vw_q4)), ]
                   date      amzn       ibm
  2013-10-01 2013-10-01 1.0265801 1.0064803
  2013-10-02 2013-10-02 0.9986291 0.9923810
  2013-10-03 2013-10-03 0.9820598 0.9940527
  2013-12-31 2013-12-31 1.0137784 1.0062229

  vw_q4$amzn <- cumprod(vw_q4$amzn)
  vw_q4$ibm <- cumprod(vw_q4$ibm)

  > vw_q4[c(1:3, nrow(vw_q4)), ]
                   date     amzn       ibm
  2013-10-01 2013-10-01 1.026580 1.0064803
  2013-10-02 2013-10-02 1.025173 0.9988119
  2013-10-03 2013-10-03 1.006781 0.9928717
  2013-12-31 2013-12-31 1.275557 1.0183460

  vw_q4$amzn_idx <- (q4_vw_inv * q4_vw_wgt$amzn_wgt) * vw_q4$amzn
  vw_q4$ibm_idx <- (q4_vw_inv * q4_vw_wgt$ibm_wgt) * vw_q4$ibm

  > vw_q4[c(1:3, nrow(vw_q4)), ]
                   date     amzn       ibm  amzn_idx   ibm_idx
  2013-10-01 2013-10-01 1.026580 1.0064803 0.4587615 0.6316188
  2013-10-02 2013-10-02 1.025173 0.9988119 0.4581326 0.6268064
  2013-10-03 2013-10-03 1.006781 0.9928717 0.4499136 0.6230786
  2013-12-31 2013-12-31 1.275557 1.0183460 0.5700249 0.6390651

  q4_vw_val <- data.frame(rowSums(vw_q4[, c("amzn_idx", "ibm_idx")]))

  > q4_vw_val[c(1:3, nrow(q4_vw_val)), ]
  [1] 1.090380 1.084939 1.072992 1.209090

  names(q4_vw_val) <- paste("port_val")
  q4_vw_val$date <- vw_q4$date

  > q4_vw_val[c(1:3, nrow(q4_vw_val)), ]
             port_val       date
  2013-10-01 1.090380 2013-10-01
  2013-10-02 1.084939 2013-10-02
  2013-10-03 1.072992 2013-10-03
  2013-12-31 1.209090 2013-12-31
#+end_src

*** Step 11: Combining Quarterly VW Portfolio Values into One Data Object

#+begin_src R
  vw_portval <- rbind(q1_vw_val, q2_vw_val, q3_vw_val, q4_vw_val)

  > vw_portval[c(1:3, nrow(vw.portval)), ]
             port_val       date
  2012-12-31 1.000000 2012-12-31
  2013-01-02 1.025271 2013-01-02
  2013-01-03 1.023211 2013-01-03
  2013-12-31 1.209090 2013-12-31
#+end_src

** 3.3.3 Normalized EW and VW Portfolio Price Chart

*** Step 1: Combine the Data

#+begin_src R
  port_val <- merge(vw.portval, ew_portval, by = "date")

  > port_val[c(1:3, nrow(port_val)), ]
            date port_val.x port_val.y
  1   2012-12-31   1.000000  1.0000000
  2   2013-01-02   1.025271  1.0253648
  3   2013-01-03   1.023211  1.0248775
  253 2013-12-31   1.209090  0.6652599
#+end_src

*** Step 2: Rename the Variables

#+begin_src R
  names(port_val) <- paste(c("date", "vw_cum", "ew_cum"))

  > port_val[c(1:3, nrow(port_val)), ]
            date   vw_cum    ew_cum
  1   2012-12-31 1.000000 1.0000000
  2   2013-01-02 1.025271 1.0253648
  3   2013-01-03 1.023211 1.0248775
  253 2013-12-31 1.209090 0.6652599
#+end_src

*** Step 3: Plot the Data

#+begin_src R
  par(mfrow = c(1, 1))
  y_range <- range(port_val[, c("vw_cum", "ew_cum")])
  y_range
  plot(port_val$ew_cum,
       type = "l",
    xlab = "Date",
    ylab = "Value of Investment",
    ylim = y_range,
    lty = 1,
    main = paste(
      "Value of $1 Investment in Equal-Weighted and Value-Weighted ",
      "\n",
      "Portfolios of AMZN, and IBM ",
      "\n",
      "December 31, 2012 - December 31, 2013"
    )
  )
  lines(port_val$vw_cum, lty = 2)
  abline(h = 1, lty = 1)
  legend("topleft",
    c("Equal-Weighted Portfolio", "Value-Weighted Portfolio"),
    lty = c(1, 2)
  )
#+end_src

[[./images/chp03-plot2.png]]

** 3.3.4 Saving Benchmark Portfolio Returns into a CSV File

*** Step 1: Convert the Data into an xts Object

#+begin_src R
  port_xts <- xts(port_val[, 2:3], order.by = port_val[, 1])

  > port_xts[c(1:3, nrow(port_xts)), ]
               vw_cum    ew_cum
  2012-12-31 1.000000 1.0000000
  2013-01-02 1.025271 1.0253648
  2013-01-03 1.023211 1.0248775
  2013-12-31 1.209090 0.6652599

  port_xts$lag_vw <- Lag(port_xts$vw_cum, k = 1)
  port_xts$lag_ew <- Lag(port_xts$ew_cum, k = 1)

  > port_xts[c(1:3, nrow(port_xts)), ]
               vw_cum    ew_cum   lag_vw    lag_ew
  2012-12-31 1.000000 1.0000000       NA        NA
  2013-01-02 1.025271 1.0253648 1.000000 1.0000000
  2013-01-03 1.023211 1.0248775 1.025271 1.0253648
  2013-12-31 1.209090 0.6652599 1.197390 0.6584057
#+end_src

*** Step 2: Create EW and vw Returns

#+begin_src R
port_xts$vw_ret <- port_xts$vw_cum / port_xts$lag_vw - 1
port_xts$ew_ret <- port_xts$ew_cum / port_xts$lag_ew - 1

> port_xts[c(1:3, nrow(port_xts)), ]
            vw_cum    ew_cum   lag_vw    lag_ew 
2012-12-31 1.000000 1.0000000       NA        NA
2013-01-02 1.025271 1.0253648 1.000000 1.0000000
2013-01-03 1.023211 1.0248775 1.025271 1.0253648
2013-12-31 1.209090 0.6652599 1.197390 0.6584057
#+end_src

*** Step 3: Clean up the Data

#+begin_src R
port_ret <- port_xts[, c(1, 2, 5, 6)]

> port_ret[c(1:3, nrow(port_ret)), ]
            vw_cum    ew_cum   lag_vw    lag_ew       vw_ret        ew_ret
2012-12-31 1.000000 1.0000000       NA        NA           NA            NA
2013-01-02 1.025271 1.0253648 1.000000 1.0000000  0.025271367  0.0253647775
2013-01-03 1.023211 1.0248775 1.025271 1.0253648 -0.002009500 -0.0004752596
2013-12-31 1.209090 0.6652599 1.197390 0.6584057  0.009770864  0.0104102915
#+end_src

*** Step 4: Create a Date Variable in the Data Object

#+begin_src R
csv_port <- cbind(data.frame(index(port_ret)), data.frame(port_ret))
names(csv_port)[1] <- paste("date")

> csv_port[c(1:3, nrow(csv_port)), ]
                 date   vw_cum    ew_cum       vw_ret        ew_ret
2012-12-31 2012-12-31 1.000000 1.0000000           NA            NA
2013-01-02 2013-01-02 1.025271 1.0253648  0.025271367  0.0253647775
2013-01-03 2013-01-03 1.023211 1.0248775 -0.002009500 -0.0004752596
2013-12-31 2013-12-31 1.209090 0.6652599  0.009770864  0.0104102915
#+end_src

*** Step 5: Replace Index with Observation Numbers

#+begin_src R
rownames(csv_port) <- seq_len(nrow(csv_port))

> csv_port[c(1:3, nrow(csv_port)), ]
          date   vw_cum    ew_cum       vw_ret        ew_ret
1   2012-12-31 1.000000 1.0000000           NA            NA
2   2013-01-02 1.025271 1.0253648  0.025271367  0.0253647775
3   2013-01-03 1.023211 1.0248775 -0.002009500 -0.0004752596
253 2013-12-31 1.209090 0.6652599  0.009770864  0.0104102915
#+end_src

*** Step 6: Save the Data to a CSV File

#+begin_src R
write.csv(csv_port, "Hypothetical Portfolio (Daily).csv")
#+end_src
