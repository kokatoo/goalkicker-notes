#+STARTUP: showeverything
#+title: Bash Notes for Professionals

* Chapter 9: Redirection

| Parameter                        | Details                                                 |
|----------------------------------+---------------------------------------------------------|
| internal file descriptor         | An integer.                                             |
| direction                        | One of >, < or <>                                       |
| external file descriptor or path | & followed by an integer for file descriptor or a path. |

** Section 9.1: Redirecting standard output

   > redirect the standard output (aka STDOUT) of the current command into a
   file or another descriptor.

   These examples write the output of the ls command into the file file.txt

#+begin_src bash
ls > file.txt
> file.txt ls
#+end_src

   The target file is created if it doesn't exists, otherwise this file is
   truncated.

   The default redirection descriptor is the standard output or 1 when none is
   specified. This command is equivalent to the previous examples with the
   standard output explicitly indicated:

#+begin_src bash
ls 1>file.txt
#+end_src

   Note: the redirection is initialized by the executed shell and not by the
   executed command, therefore it is done before the command execution.

** Section 9.2: Append vs Truncate

*** Truncate >
    
    1. Create specified file if it does not exist.
    2. Truncate (remove file's content)
    3. Write to file

#+begin_src bash
$ echo "first line" > /tmp/lines
$ echo "second line" > /tmp/lines

$ cat /tmp/lines
second line
#+end_src

*** Append >>

     1. Create specified file if it does not exist.
     2. Append file (writing at end of file).

#+begin_src bash
# Overwrite existing file
$ echo "first line" > /tmp/lines

# Append a second line
$ echo "second line" >> /tmp/lines

$ cat /tmp/lines
first line
second line
#+end_src

** Section 9.3: Redirecting both STDOUT and STDERR

   File descriptors like 0 and 1 are pointers. We change what file descriptors
   point to with redirection. >/dev/null means 1 points to /dev/null.

   First we point 1 (STDOUT) to /dev/null then point 2 (STDERR) to whatever 1
   points to.

#+begin_src bash
# STDERR is redirect to STDOUT and STDOUT is redirected to /dev/null,
# effectually redirecting both STDERR and STDOUT to /dev/null
echo 'hello' > /dev/null 2>&1

Version ≥ 4.0
#+end_src

   This can be further shortened to the following:

#+begin_src bash
echo 'hello' &> /dev/null
#+end_src

   However, this form may be undesirable in production if shell compatibility is
   a concern as it conﬂicts with POSIX, introduces parsing ambiguity, and shells
   without this feature will misinterpret it:

#+begin_src bash
# Actual code
echo 'hello' &> /dev/null
echo 'hello' &> /dev/null 'goodbye'

# Desired behavior
echo 'hello' > /dev/null 2>&1
echo 'hello' 'goodbye' > /dev/null 2>&1

# Actual behavior
echo 'hello' &
echo 'hello' & goodbye > /dev/null
#+end_src

   NOTE: &> is known to work as desired in both Bash and Zsh.
   
** Section 9.4: Using named pipes

   Sometimes you may want to output something by one program and input it into
   another program, but can't use a standard pipe.

#+begin_src bash
ls -l | grep ".log"
#+end_src

   You could simply write to a temporary file:

#+begin_src bash
touch tempFile.txt
ls -l > tempFile.txt
grep ".log" < tempFile.txt
#+end_src

   This works fine for most applications, however, nobody will know what tempFile
   does and someone might remove it if it contains the output of ls -l in that
   directory. This is where a named pipe comes into play:

#+begin_src bash
mkfifo myPipe
ls -l > myPipe
grep ".log" < myPipe
#+end_src

   myPipe is technically a file (everything is in Linux), so let's do ls -l in an
   empty directory that we just created a pipe in:

#+begin_src bash
mkdir pipeFolder
cd pipeFolder
mkfifo myPipe
ls -l
#+end_src

   The output is:

   ~prw-r--r-- 1 root root 0 Jul 25 11:20 myPipe~

   Notice the first character in the permissions, it's listed as a pipe, not a
   file.

   Now let's do something cool.

   Open one terminal, and make note of the directory (or create one so that
   cleanup is easy), and make a pipe.

   ~mkfifo myPipe~

   Now let's put something in the pipe.

   ~echo "Hello from the other side" > myPipe~

   You'll notice this hangs, the other side of the pipe is still closed. Let's
   open up the other side of the pipe and let that stuff through.

   Open another terminal and go to the directory that the pipe is in (or if you
   know it, prepend it to the pipe):

   ~cat < myPipe~

   You'll notice that after hello from the other side is output, the program in
   the first terminal finishes, as does that in the second terminal.

   Now run the commands in reverse. Start with cat < myPipe and then echo
   something into it. It still works, because a program will wait until
   something is put into the pipe before terminating, because it knows it has to
   get something.

   Named pipes can be useful for moving information between terminals or between
   programs.

   Pipes are small. Once full, the writer blocks until some reader reads the
   contents, so you need to either run the reader and writer in different
   terminals or run one or the other in the background:

#+begin_src bash
ls -l /tmp > myPipe & cat < myPipe
#+end_src

*** More examples using named pipes:

    * Example 1 - all commands on the same terminal / same shell

#+begin_src bash
$ { ls -l && cat file3; } >mypipe &
$ cat <mypipe
# Output: Prints ls -l data and then prints file3 contents on screen
#+end_src

    * Example 2 - all commands on the same terminal / same shell
      
#+begin_src bash
$ ls -l >mypipe &
$ cat file3 >mypipe &
$ cat <mypipe
#Output: This prints on screen the contents of mypipe.
#+end_src

      Mind that first contents of file3 are displayed and then the ls -l data is
      displayed (LIFO configuration).

    * Example 3 - all commands on the same terminal / same shell

#+begin_src bash
$ { pipedata=$(<mypipe) && echo "$pipedata"; } &
$ ls >mypipe
# Output: Prints the output of ls directly on screen
#+end_src

      Mind that the variable $pipedata is not available for usage in the main
      terminal / main shell since the use of & invokes a subshell and $pipedata
      was only available in this subshell.

    * Example 4 - all commands on the same terminal / same shell

#+begin_src bash
$ export pipedata
$ pipedata=$(<mypipe) &
$ ls -l *.sh >mypipe
$ echo "$pipedata"
#Output : Prints correctly the contents of mypipe
#+end_src

       This prints correctly the value of $pipedata variable in the main shell
       due to the export declaration of the variable. The main terminal/main
       shell is not hanging due to the invocation of a background shell (&).

** Section 9.5: Redirection to network addresses

   ~Version ≥ 2.04~

   Bash treats some paths as special and can do some network communication by
   writing to ~/dev/{udp|tcp}/host/port~. Bash cannot setup a listening server,
   but can initiate a connection, and for TCP can read the results at least.

   For example, to send a simple web request one could do:

#+begin_src bash
exec 3</dev/tcp/www.google.com/80
printf 'GET / HTTP/1.0\r\n\r\n' >&3
cat <&3
#+end_src

   and the results of www.google.com's default web page will be printed to
   stdout.
   
   Similarly

#+begin_src bash
printf 'HI\n' >/dev/udp/192.168.1.1/6666
#+end_src

   would send a UDP message containing HI\n to a listener on 192.168.1.1:6666

   
** Section 9.6: Print error messages to stderr

   Error messages are generally included in a script for debugging purposes or
   for providing rich user experience. Simply writing error message like this:

#+begin_src bash
cmd || echo 'cmd failed'
#+end_src

   may work for simple cases but it's not the usual way. In this example, the
   error message will pollute the actual output of the script by mixing both
   errors and successful output in stdout.

   In short, error message should go to stderr not stdout. It's pretty simple:

#+begin_src bash
cmd || echo 'cmd failed' >/dev/stderr
#+end_src

   Another example:

#+begin_src bash
  if cmd; then
      echo 'success'
  else
      echo 'cmd failed' >/dev/stderr
  fi
#+end_src

   In the above example, the success message will be printed on stdout while the
   error message will be printed on stderr.

   A better way to print error message is to define a function:

#+begin_src bash
  err(){ 
      echo "E: $*" >>/dev/stderr
  }
#+end_src

   Now, when you have to print an error:

#+begin_src bash
err "My error message"
#+end_src

** Section 9.7: Redirecting multiple commands to the same file

#+begin_src bash
  {
    echo "contents of home directory"
    ls ~
  } > output.txt
#+end_src

** Section 9.8: Redirecting STDIN

   < reads from its right argument and writes to its left argument.

   To write a file into STDIN we should read /tmp/a_file and write into STDIN i.e
   0</tmp/a_file

   Note: Internal file descriptor defaults to 0 (STDIN) for <

#+begin_src bash
$ echo "b" > /tmp/list.txt
$ echo "a" >> /tmp/list.txt
$ echo "c" >> /tmp/list.txt
$ sort < /tmp/list.txt
a
b
c
#+end_src

** Section 9.9: Redirecting STDERR

   2 is STDERR.

#+begin_src bash
$ echo_to_stderr 2>/dev/null # echos nothing
#+end_src

   Definitions:

   echo_to_stderr is a command that writes "stderr" to STDERR

#+begin_src bash
  echo_to_stderr () { 
      echo stderr >&2
  }

$ echo_to_stderr
stderr
#+end_src

** Section 9.10: STDIN, STDOUT and STDERR explained

   Commands have one input (STDIN) and two kinds of outputs, standard output
   (STDOUT) and standard error (STDERR).

   For example:
   
*** STDIN

#+begin_src bash
root@server~# read
Type some text here
#+end_src

    Standard input is used to provide input to a program. (Here we're using the
    read builtin to read a line from STDIN.)

*** STDOUT

#+begin_src bash
root@server~# ls file
file
#+end_src

    Standard output is generally used for "normal" output from a command. For
    example, ls lists files, so the files are sent to STDOUT.

*** STDERR

#+begin_src bash
root@server~# ls anotherfile
ls: cannot access 'anotherfile': No such file or directory
#+end_src

    Standard error is (as the name implies) used for error messages. Because
    this message is not a list of files, it is sent to STDERR.

    STDIN, STDOUT and STDERR are the three standard streams. They are identified
    to the shell by a number rather than a name:

    0 = Standard in
    1 = Standard out
    2 = Standard error

    By default, STDIN is attached to the keyboard, and both STDOUT and STDERR
    appear in the terminal. However, we can redirect either STDOUT or STDERR to
    whatever we need. For example, let's say that you only need the standard out
    and all error messages printed on standard error should be suppressed.
    That's when we use the descriptors 1 and 2.

*** Redirecting STDERR to /dev/null

    Taking the previous example,

#+begin_src bash
root@server~# ls anotherfile 2>/dev/null
root@server~#
#+end_src

    In this case, if there is any STDERR, it will be redirected to /dev/null (a
    special file which ignores anything put into it), so you won't get any error
    output on the shell.root@server~# In this case, if there is any STDERR, it
    will be redirected to /dev/null (a special file which ignores anything put
    into it), so you won't get any error output on the shell.
