#+STARTUP: showeverything
#+title: Bash Notes for Professionals

* Chapter 44: Managing PATH environment variable

| Parameter | Details                   |
|-----------+---------------------------|
| PATH      | Path environment variable |

** Section 44.1: Add a path to the PATH environment variable

   The PATH environment variable is generally defined in ~.bashrc~ or
   ~.bash_profile~ or ~/etc/profile~ or ~.profile~ or ~/etc/bash.bashrc~ (distro
   specific Bash configuration file)

#+begin_src bash
  $ echo $PATH
  /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin: /usr/lib/jvm/jdk1.8.0_92/bin:/usr/lib/jvm/jdk1.8.0_92/db/bin:/usr/lib/jvm/jdk1.8.0_92/jre/bin
#+end_src

   Now, if we want to add a path (e.g ~/bin) to the PATH variable:

#+begin_src bash
  PATH=~/bin:$PATH
  # or
  PATH=$PATH:~/bin
#+end_src

   But this will modify the PATH only in the current shell (and its subshell).
   Once you exit the shell, this modification will be gone.

   To make it permanent, we need to add that bit of code to the ~.bashrc~ (or
   whatever) file and reload the file.

   If you run the following code (in terminal), it will add ~~/bin~ to the PATH
   permanently:

#+begin_src bash
  echo 'PATH=~/bin:$PATH' >> ~/.bashrc && source ~/.bashrc
#+end_src

   Explanation:

   * ~echo 'PATH=~/bin:$PATH'~ >> ~bashrc~ adds the line PATH=~/bin:$PATH at the
     end of ~.bashrc~ file (you could do it with a text editor)
   * ~source ~/.bashrc~ reloads the ~bashrc~ file

   This is a bit of code (run in terminal) that will check if a path is already
   included and add the path only if not:

#+begin_src bash
  path=~/bin # path to be included
  bashrc=~/.bashrc # bash file to be written and reloaded
  # run the following code unmodified
  echo $PATH  | grep -q "\(^\|:\)$path\(:\|/\{0,1\}$\)" || echo "PATH=\$PATH:$path" >> "$bashrc";
  source "$bashrc"
#+end_src

** Section 44.2: Remove a path from the PATH environment variable

   To remove a PATH from a PATH environment variable, you need to edit ~.bashrc~
   or ~.bash_profile~ or ~/etc/profile~ or ~.profile~ or ~/etc/bash.bashrc~ (distro
   specific) file and remove the assignment for that particular path.

   Instead of finding the exact assignment, you could just do a replacement in
   the $PATH in its final stage.

   The following will safely remove ~$path~ from ~$PATH~:

#+begin_src bash
  path=~/bin
  PATH="$(echo "$PATH" |sed -e "s#\(^\|:\)$(echo "$path" |sed -e 's/[^^]/[&]/g' -e
  's/\^/\\^/g')\(:\|/\{0,1\}$\)#\1\2#" -e 's#:\+#:#g' -e 's#^:\|:$##g')"
#+end_src

   To make it permanent, you will need to add it at the end of your bash
   configuration file.

   You can do it in a functional way:

#+begin_src bash
  rpath(){
      for path in "$@";do
          PATH="$(echo "$PATH" |sed -e "s#\(^\|:\)$(echo "$path" |sed -e 's/[^^]/[&]/g' -e
      's/\^/\\^/g')\(:\|/\{0,1\}$\)#\1\2#" -e 's#:\+#:#g' -e 's#^:\|:$##g')"
      done
      echo "$PATH"
  }
  PATH="$(rpath ~/bin /usr/local/sbin /usr/local/bin)"
  PATH="$(rpath /usr/games)"
  # etc ...
#+end_src

   This will make it easier to handle multiple paths.

   *Notes:*

   * You will need to add these codes in the Bash configuration file (~.bashrc~ or whatever).
   * Run source ~.bashrc~ to reload the Bash configuration (~.bashrc~) file.
