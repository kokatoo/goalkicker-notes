#+STARTUP: showeverything
#+title: bash Cookbook

* Chp11: Working with Dates and Times

** 11.1 Formatting Dates for Display

   ISO 8601 is the recommended standard for displaying dates and times and
   should be used if at all possible. It offers a number of advantages over
   other display formats:

   * It is a recognized standard.
   * It is unambiguous.
   * It is easy to read while still being easy to parse programmatically (e.g.,
     using awk or cut).
   * It sorts as expected when used in columnar data or in filenames.

#+begin_src bash
  $ STRICT_ISO_8601='%Y-%m-%dT%H:%M:%S%z' # Strict ISO 8601 format
  $ ISO_8601='%Y-%m-%d %H:%M:%S %Z' # Almost ISO8601, but more human-readable
  $ ISO_8601_1='%Y-%m-%d %T %Z' # %T is the same as %H:%M:%S
  $ DATEFILE='%Y%m%d%H%M%S' # Suitable for use in a filename

  $ date "+$ISO_8601"
  2006-05-08 14:36:51 CDT

  $ gawk "BEGIN {print strftime(\"$ISO_8601\")}"
  2006-12-07 04:38:54 EST

  # Same as previous $ISO_8601
  $ date '+%Y-%m-%d %H:%M:%S %Z'
  2006-05-08 14:36:51 CDT

  $ date -d '2005-11-06' "+$ISO_8601"
  2005-11-06 00:00:00 CST

  $ date "+Program starting at: $ISO_8601"
  Program starting at: 2006-05-08 14:36:51 CDT
#+end_src

** 11.2 Supplying a Default Date

#+begin_src bash
  # Print last Monday
  START_DATE=$(date -d 'last week Monday 12:00:00' '+%Y-%m-%d')
#+end_src

** 11.3 Automating Date Ranges

#+begin_src bash
  $ date '+%Y-%m-%d %H:%M:%S %z'
  2005-11-05 01:03:00 -0500

  $ date -d 'today' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-05 01:04:39 -0500

  $ date -d 'yesterday' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-04 01:04:48 -0500

  $ date -d 'tomorrow' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-06 01:04:55 -0500

  $ date -d 'Monday' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-07 00:00:00 -0500

  $ date -d 'this Monday' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-07 00:00:00 -0500

  $ date -d 'last Monday' '+%Y-%m-%d %H:%M:%S %z'
  2005-10-31 00:00:00 -0500

  $ date -d 'next Monday' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-07 00:00:00 -0500

  $ date -d 'last week' '+%Y-%m-%d %H:%M:%S %z'
  2005-10-29 01:05:24 -0400

  $ date -d 'next week' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-12 01:05:29 -0500

  $ date -d '2 weeks' '+%Y-%m-%d %H:%M:%S %z'
  2005-11-19 01:05:42 -0500

  $ date -d '-2 weeks' '+%Y-%m-%d %H:%M %S %z'
  2005-10-22 01:05:47 -0400

  $ date -d '2 weeks ago' '+%Y-%m-%d %H:%M %S %z'
  2005-10-22 01:06:00 -0400

  $ date -d '+4 days' '+%Y-%m-%d %H:%M %S %z'
  2005-11-09 01:06:23 -0500

  $ date -d '-6 days' '+%Y-%m-%d %H:%M %S %z'
  2005-10-30 01:06:30 -0400

  $ date -d '2000-01-01 +12 days' '+%Y-%m-%d%H:%M: %S %z'
  2000-01-13 00:00:00 -0500

  $ date -d '3 months 1 day' '+%Y-%m-%d %H %M:%S %z'
  2006-02-06 01:03:00 -0500
#+end_src

** 11.4 Converting Dates and Times to Epoch Seconds

#+begin_src bash
  $ date '+%s'
  1131172934

  $ date -d '2005-11-05 12:00:00 +0000' '+%s'
  1131192000
#+end_src

** 11.5 Converting Epoch Seconds to Dates and Times

#+begin_src bash
  $ EPOCH='1131173989'

  $ date -d "1970-01-01 UTC $EPOCH seconds" +"%Y-%m-%d %T %z"
  2005-11-05 01:59:49 -0500

  $ date --utc --date "1970-01-01 $EPOCH seconds" +"%Y-%m-%d %T %z"
  2005-11-05 06:59:49 +0000
#+end_src

** 11.7 Figuring Out Date and Time Arithmetic

#+begin_src bash
  CORRECTION='172800' # 2 days' worth of seconds

  bad_date='Jan 2 05:13:05'

  # Convert to epoch second
  bad_epoch=$(date -d "$bad_date" '+%s')

  good_epoch=$(( bad_epoch + $CORRECTION ))

  # Make corrected date human-readable
  good_date=$(date -d "1970-01-01 UTC $good_epoch seconds")
  good_date_iso=$(date -d "1970-01-01 UTC $good_epoch seconds" +'%Y-%m-%d %T')
#+end_src
