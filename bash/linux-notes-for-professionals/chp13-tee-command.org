#+STARTUP: showeverything
#+title: Linux Notes for Professionals

* Chapter 13: tee command

| Options                     | Description                                  |
|-----------------------------+----------------------------------------------|
| ~-a~, ~--append~            | Append to the given FILEs. Do not overwrite. |
| ~-i~, ~--ignore-interrupts~ | Ignore interrupt signals.                    |
| ~--help~                    | Display a help message, and exit.            |
| ~--version~                 | Display version information, and exit.       |

   ~tee~ - read from standard input and write to standard output and files.

   The tee command is named after the T-splitter in plumbing, which splits water
   into two directions and is shaped like an uppercase T.

   ~tee~ copies data from standard input to each <file>, and also to standard
   output. In effect, ~tee~ duplicates its input, routing it to multiple outputs at
   once.

** Section 13.1: Write output to stdout, and also to a file

   The following command displays output only on the screen (stdout).

#+begin_src bash
  $ ls
#+end_src

   The following command writes the output only to the file and not to the
   screen.

#+begin_src bash
   $ ls > file
#+end_src

   The following command (with the help of ~tee~ command) writes the output both
   to the screen (stdout) and to the file.

#+begin_src bash
  $ ls | tee file
#+end_src

** Section 13.2: Write output from the middle of a pipe chain to a file and pass it back to the pipe

   You can also use tee command to store the output of a command in a file and
   redirect the same output to another command.

   The following command will write current crontab entries to a file
   crontab-backup.txt and pass the crontab entries to sed command, which will do
   the substitution. After the substitution, it will be added as a new cron job.

#+begin_src bash
  $ crontab -l | tee crontab-backup.txt | sed 's/old/new/' | crontab –
#+end_src

** Section 13.3: write the output to multiple files

   You can pipe your output to multiple files (including your terminal) by using
   tee like this:

#+begin_src bash
  $ ls | tee file1 file2 file3
#+end_src

** Section 13.4: Instruct tee command to append to the file

   By default tee command overwrites the file. You can instruct tee to append to
   the file using the ~–a~ option as shown below.

#+begin_src bash
  $ ls | tee –a file
#+end_src
