#+STARTUP: showeverything
#+title: Bash Notes for Professionals

* Chapter 25: Math

** Section 25.1: Math using dc

   dc is one of the oldest programs on Unix.

   It uses [[https://en.wikipedia.org/wiki/Reverse_Polish_notation][reverse polish notation]], which means that you first stack numbers,
   then operations. For example 1+1 is written as 1 1+.

   To print an element from the top of the stack use command p

#+begin_src bash
  echo '2 3 + p' | dc
  5

  or

  dc <<< '2 3 + p'
  5
#+end_src

   You can print the top element many times

#+begin_src bash
  dc <<< '1 1 + p 2 + p'
  2
  4
#+end_src

   For negative numbers use _ prefix

#+begin_src bash
  dc <<< '_1 p'
  -1
#+end_src

   You can also use capital letters from A to F for numbers between 10 and 15
   and . as a decimal point

#+begin_src bash
  dc <<< 'A.4 p'
  10.4
#+end_src

   dc is using [[
https://en.wikipedia.org/wiki/Arbitrary-precision_arithmeticqhttps://en.wikipedia.org/wiki/Arbitrary-precision_arithmeticabitrary
][arbitrary precision]] which means that the precision is limited only by the
   available memory. By default the precision is set to 0 decimals

#+begin_src bash
  dc <<< '4 3 / p'
  1
#+end_src

   We can increase the precision using command k. 2k will use

#+begin_src bash
  dc <<< '2k 4 3 / p'
  1.33

  dc <<< '4k 4 3 / p'
  1.3333
#+end_src

   You can also use it over multiple lines

#+begin_src bash
dc << EOF
1 1 +
3 *
p
EOF
6
#+end_src

   bc is a preprocessor for dc.

** Section 25.2: Math using bash capabilities

   Arithmetic computation can be also done without involving any other programs
   like this:

   Multiplication:

#+begin_src bash
  echo $((5 * 2))
  10
#+end_src

   Division:

#+begin_src bash
  echo $((5 / 2))
  2
#+end_src

   Modulo:

#+begin_src bash
  echo $((5 % 2))
  1
#+end_src

   Exponentiation:

#+begin_src bash
  echo $((5 ** 2)) 25
#+end_src

** Section 25.3: Math using bc

   [[https://www.gnu.org/software/bc/manual/html_mono/bc.html][bc]] is an arbitrary precision calculator language. It could be used
   interactively or be executed from command line.

   For example, it can print out the result of an expression:

#+begin_src bash
  echo '2 + 3' | bc
  5

  echo '12 / 5' | bc
  2
#+end_src

   For ï¬‚oating-post arithmetic, you can import standard library bc -l:

#+begin_src bash
  echo '12 / 5' | bc -l
  2.40000000000000000000
#+end_src

   It can be used for comparing expressions:

#+begin_src bash
  echo '8 > 5' | bc
  1

  echo '10 == 11' | bc
  0

  echo '10 == 10 && 8 > 3' | bc
  1
#+end_src

** Section 25.4: Math using expr

   expr or Evaluate expressions evaluates an expression and writes the result on
   standard output

   Basic arithmetics

#+begin_src bash
expr 2 + 3
5
#+end_src

   When multiplying, you need to escape the * sign

#+begin_src bash
expr 2 \* 3 6
#+end_src

   You can also use variables

#+begin_src bash
  a=2
  expr $a + 3
  5
#+end_src

   Keep in mind that it only supports integers, so expression like this

#+begin_src bash
  expr 3.0 / 2
#+end_src

   will throw an error expr: not a decimal number: '3.0'.

   It supports regular expression to match patterns

#+begin_src bash
  expr 'Hello World' : 'Hell\(.*\)rld'
  o Wo
#+end_src

   Or find the index of the first char in the search string

   This will throw expr: syntax error on Mac OS X, because it uses BSD expr
   which does not have the index command, while expr on Linux is generally GNU
   expr

#+begin_src bash
expr index hello l
3

expr index 'hello' 'lo'
3
#+end_src
