#+STARTUP: showeverything
#+title: Git Notes for Professionals

* Chapter 1: Getting started with Git

** Section 1.1: Create your first repository, then add and commit files

   At the command line, first verify that you have Git installed:

   On all operating systems:

#+begin_src bash
  git --version
#+end_src

   On UNIX-like operating systems:

#+begin_src bash
  which git
#+end_src

   If nothing is returned, or the command is not recognized, you may have to
   install Git on your system by downloading and running the installer. See the
   [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][Git homepage]] for exceptionally clear and easy installation instructions.

   After installing Git, configure your username and email address. Do this
   before making a commit.

   Once Git is installed, navigate to the directory you want to place under
   version control and create an empty Git repository:

#+begin_src bash
  git init
#+end_src

   This creates a hidden folder, ~.git~, which contains the plumbing needed for
   Git to work.

   Next, check what files Git will add to your new repository; this step is worth
   special care:

#+begin_src bash
  git status
#+end_src

   Review the resulting list of files; you can tell Git which of the files to
   place into version control (avoid adding files with confidential information
   such as passwords, or files that just clutter the repo):

#+begin_src bash
  git add <dir1/file1> <dir2/file2> < ... >
#+end_src

   If all files in the list should be shared with everyone who has access to the
   repository, a single command will add everything in your current directory
   and its subdirectories:

#+begin_src bash
  git add .
#+end_src

   This will "stage" all files to be added to version control, preparing them to
   be committed in your first commit.

   For files that you want never under version control, create and populate a file
   named ~.gitignore~ before running the ~add~ command.

   Commit all the files that have been added, along with a commit message:

#+begin_src bash
  git commit -m "Initial commit"
#+end_src

   This creates a new commit with the given message. A commit is like a save or
   snapshot of your entire project. You can now push, or upload, it to a remote
   repository, and later you can jump back to it if necessary. If you omit the
   ~-m~ parameter, your default editor will open and you can edit and save the
   commit message there.

   *Adding a remote*

   To add a new remote, use the git ~remote add~ command on the terminal, in the
   directory your repository is stored at.

   The ~git remote add~ command takes two arguments:

   1. A remote name, for example, ~origin~
   2. A remote URL, for example,
      ~https://<your-git-service-address>/user/repo.git~

#+begin_src bash
  git remote add origin https://<your-git-service-address>/owner/repository.git
#+end_src

NOTE: Before adding the remote you have to create the required repository in
   your git service, You'll be able to push/pull commits after adding your
   remote.

** Section 1.2: Clone a repository

   The ~git clone~ command is used to copy an existing Git repository from a
   server to the local machine.

   For example, to clone a GitHub project:

#+begin_src bash
  cd <path where you would like the clone to create a directory>
  git clone https://github.com/username/projectname.git
#+end_src

   To clone a BitBucket project:

#+begin_src bash
  cd <path where you would like the clone to create a directory>
  git clone https://yourusername@bitbucket.org/username/projectname.git
#+end_src

   This creates a directory called projectname on the local machine, containing
   all the files in the remote Git repository. This includes source files for the
   project, as well as a ~.git~ sub-directory which contains the entire history
   and configuration for the project.

   To specify a diﬀerent name of the directory, e.g. MyFolder:

#+begin_src bash
  git clone https://github.com/username/projectname.git MyFolder
#+end_src

   Or to clone in the current directory:

#+begin_src bash
  git clone https://github.com/username/projectname.git .
#+end_src

   Note:

   1. When cloning to a specified directory, the directory must be empty or non-existent.
   2. You can also use the ssh version of the command:

#+begin_src bash
  git clone git@github.com:username/projectname.git
#+end_src

   The https version and the ~ssh~ version are equivalent. However, some hosting
   services such as GitHub [[https://help.github.com/articles/set-up-git/#next-steps-authenticating-with-github-from-git][recommend]] that you use https rather than ~ssh~.

** Section 1.3: Sharing code

   To share your code you create a repository on a remote server to which you
   will copy your local repository.

   To minimize the use of space on the remote server you create a bare
   repository: one which has only the ~.git~ objects and doesn't create a working
   copy in the filesystem. As a bonus you set this remote as an upstream server
   to easily share updates with other programmers.

   On the remote server:

#+begin_src bash
  git init --bare /path/to/repo.git
#+end_src

   On the local machine:

#+begin_src bash
  git remote add origin ssh://username@server:/path/to/repo.git
#+end_src

   (Note that ssh: is just one possible way of accessing the remote repository.)

   Now copy your local repository to the remote:

#+begin_src bash
  git push --set-upstream origin master
#+end_src

   Adding ~--set-upstream~ (or ~-u~) created an upstream (tracking) reference
   which is used by argument-less Git commands, e.g. ~git pull~.

** Section 1.4: Setting your user name and email

   You need to set who you are *before* creating any commit. That will allow
   commits to have the right author name and email associated to them.

   It has nothing to do with authentication when pushing to a remote repository
   (e.g. when pushing to a remote repository using your GitHub, BitBucket, or
   GitLab account)

   To declare that identity for all repositories, use ~git config --global~

   This will store the setting in your user's ~.gitconfig~ file: e.g.
   ~$HOME/.gitconfig~ or for Windows, ~%USERPROFILE%\.gitconfig~.

#+begin_src bash
  git config --global user.name "Your Name"
  git config --global user.email mail@example.com
#+end_src

   To declare an identity for a single repository, use ~git config~ inside a
   repo.

   This will store the setting inside the individual repository, in the file
   ~$GIT_DIR/config~. e.g. ~/path/to/your/repo/.git/config~.

#+begin_src bash
  cd /path/to/my/repo
  git config user.name "Your Login At Work"
  git config user.email mail_at_work@example.com
#+end_src

   Settings stored in a repository's config file will take precedence over the
   global config when you use that repository.

   Tips: if you have diﬀerent identities (one for open-source project, one at
   work, one for private repos, ...), and you don't want to forget to set the
   right one for each diﬀerent repos you are working on:

   * Remove a global identity

#+begin_src bash
  git config --global --remove-section user.name
  git config --global --remove-section user.email
#+end_src

   * To force git to look for your identity only within a repository's settings,
     not in the global config:

#+begin_src bash
  git config --global user.useConfigOnly true
#+end_src

   That way, if you forget to set your user.name and user.email for a given
   repository and try to make a commit, you will see:

#+begin_src bash
  no name was given and auto-detection is disabled
  no email was given and auto-detection is disabled
#+end_src

** Section 1.5: Setting up the upstream remote

   If you have cloned a fork (e.g. an open source project on Github) you may not
   have push access to the upstream repository, so you need both your fork but
   be able to fetch the upstream repository.

   First check the remote names:

#+begin_src bash
  $ git remote -v
  origin   https://github.com/myusername/repo.git (fetch)
  origin   https://github.com/myusername/repo.git (push)
  upstream # this line may or may not be here
#+end_src

   If upstream is there already (it is on some Git versions) you need to set the
   URL (currently it's empty):

#+begin_src bash
  $ git remote set-url upstream https://github.com/projectusername/repo.git
#+end_src

   If the upstream is not there, or if you also want to add a friend/colleague's
   fork (currently they do not exist):

#+begin_src bash
  $ git remote add upstream https://github.com/projectusername/repo.git
  $ git remote add dave https://github.com/dave/repo.git
#+end_src

** Section 1.6: Learning about a command

   To get more information about any git command – i.e. details about what the
   command does, available options and other documentation – use the ~--help~
   option or the ~help~ command.

   For example, to get all available information about the git diff command,
   use:

#+begin_src bash
  git diff --help
  git help diff
#+end_src

   Similarly, to get all available information about the status command, use:

#+begin_src bash
  git status --help
  git help status
#+end_src

   If you only want a quick help showing you the meaning of the most used
   command line flags, use ~-h~:

#+begin_src bash
  git checkout -h
#+end_src

** Section 1.7: Set up SSH for Git

   If you are using Windows open [[https://git-for-windows.github.io/][Git Bash]]. If you are using Mac or Linux open
   your Terminal.

   Before you generate an SSH key, you can check to see if you have any existing
   SSH keys.

   List the contents of your ~~/.ssh~ directory:

#+begin_src bash
  $ ls -al ~/.ssh
  # Lists all the files in your ~/.ssh directory
#+end_src

   Check the directory listing to see if you already have a public SSH key. By
   default the filenames of the public keys are one of the following:

#+begin_src bash
  id_dsa.pub
  id_ecdsa.pub
  id_ed25519.pub
  id_rsa.pub
#+end_src

   If you see an existing public and private key pair listed that you would like
   to use on your Bitbucket, GitHub (or similar) account you can copy the
   contents of the id_*.pub file.

   If not, you can create a new public and private key pair with the following
   command:

#+begin_src bash
  $ ssh-keygen
#+end_src

   Press the Enter or Return key to accept the default location. Enter and
   re-enter a passphrase when prompted, or leave it empty.

   Ensure your SSH key is added to the ~ssh-agent~. Start the ~ssh-agent~ in the
   background if it's not already running:

#+begin_src bash
  $ eval "$(ssh-agent -s)"
#+end_src

   Add you SSH key to the ssh-agent. Notice that you'll need te replace id_rsa
   in the command with the name of your private key file:

#+begin_src bash
  $ ssh-add ~/.ssh/id_rsa
#+end_src

   If you want to change the upstream of an existing repository from HTTPS to
   SSH you can run the following command:

#+begin_src bash
  $ git remote set-url origin ssh://git@bitbucket.server.com:7999/projects/your_project.git
#+end_src

   In order to clone a new repository over SSH you can run the following
   command:

#+begin_src bash
  $ git clone ssh://git@bitbucket.server.com:7999/projects/your_project.git
#+end_src

** Section 1.8: Git Installation

   Let’s get into using some Git. First things first—you have to install it. You
   can get it a number of ways; the two major ones are to install it from source
   or to install an existing package for your platform.

   *Installing from Source*

   If you can, it’s generally useful to install Git from source, because you’ll
   get the most recent version. Each version of Git tends to include useful UI
   enhancements, so getting the latest version is often the best route if you
   feel comfortable compiling software from source. It is also the case that
   many Linux distributions contain very old packages; so unless you’re on a
   very up-to-date distro or are using backports, installing from source may be
   the best bet.

   To install Git, you need to have the following libraries that Git depends on:
   curl, zlib, openssl, expat, and libiconv. For example, if you’re on a system
   that has yum (such as Fedora) or apt-get (such as a Debian based system), you
   can use one of these commands to install all of the dependencies:

#+begin_src bash
  $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
  $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev
#+end_src

   When you have all the necessary dependencies, you can go ahead and grab the
   latest snapshot from the Git web site:

   http://git-scm.com/download Then, compile and install:

#+begin_src bash
  $ tar -zxf git-1.7.2.2.tar.gz
  $ cd git-1.7.2.2
  $ make prefix=/usr/local all
  $ sudo make prefix=/usr/local install
#+end_src

   After this is done, you can also get Git via Git itself for updates:

#+begin_src bash
  $ git clone git://git.kernel.org/pub/scm/git/git.git
#+end_src

   *Installing on Linux*

   If you want to install Git on Linux via a binary installer, you can generally
   do so through the basic package- management tool that comes with your
   distribution. If you’re on Fedora, you can use yum:

#+begin_src bash
  $ yum install git
#+end_src

   Or if you’re on a Debian-based distribution like Ubuntu, try apt-get:

#+begin_src bash
  $ apt-get install git
#+end_src

   *Installing on Mac*

   There are three easy ways to install Git on a Mac. The easiest is to use the
   graphical Git installer, which you can download from the SourceForge page.

   http://sourceforge.net/projects/git-osx-installer/

   Figure 1-7. Git OS X installer. The other major way is to install Git via
   MacPorts (http://www.macports.org). If you have MacPorts installed, install
   Git via

#+begin_src bash
  $ sudo port install git +svn +doc +bash_completion +gitweb
#+end_src

   You don’t have to add all the extras, but you’ll probably want to include
   +svn in case you ever have to use Git with Subversion repositories (see
   Chapter 8).

   Homebrew (http://brew.sh/) is another alternative to install Git. If you have
   Homebrew installed, install Git via

#+begin_src bash
  $ brew install git
#+end_src

   *Installing on Windows*

   Installing Git on Windows is very easy. The msysGit project has one of the
   easier installation procedures. Simply download the installer exe file from
   the GitHub page, and run it:

#+begin_src bash
  http://msysgit.github.io
#+end_src

   After it’s installed, you have both a command-line version (including an SSH
   client that will come in handy later) and the standard GUI.

   Note on Windows usage: you should use Git with the provided msysGit shell
   (Unix style), it allows to use the complex lines of command given in this
   book. If you need, for some reason, to use the native Windows shell / command
   line console, you have to use double quotes instead of single quotes (for
   parameters with spaces in them) and you must quote the parameters ending with
   the circumﬂex accent (^) if they are last on the line, as it is a
   continuation symbol in Windows.
