#+STARTUP: showeverything
#+title: Linux Notes for Professionals

* Chapter 1: Getting started with GNU/Linux

** Section 1.1: Useful shortcuts Using The Terminal

   The examples in this document assume that you are using a POSIX-compliant
   (such as bash, sh, zsh, ksh) shell.

   Large portions of GNU/Linux functionality are achieved using the terminal.
   Most distributions of Linux include terminal emulators that allow users to
   interact with a shell from their desktop environment. A shell is a command- line
   interpreter that executes user inputted commands. Bash (Bourne Again Shell) is a
   common default shell among many Linux distributions and is the default shell for
   macOS.

   These shortcuts will work if you are using Bash with the emacs keybindings
   (set by default):

*** Open Terminal

| ~C-M-t~ | Open terminal |

*** Cursor Movement

| ~C-a~  | Go to the beginning of the line you are currently typing on.                   |
| ~C-e~  | Go to the end of the line you are currently typing on.                         |
| ~C-xx~ | Move between the beginning of the line and the current position of the cursor. |
| ~M-f~  | Move cursor forward one word on the current line.                              |
| ~M-b~  | Move cursor backward one word on the current line                              |
| ~C-f~  | Move cursor forward one character on the current line.                         |
| ~C-b~  | Move cursor backward one character on the current line.                        |

*** Text Manipulation

| ~C-u~ | Cut the line from the current position to the beginning of the line, adding it to the clipboard. |
|       | If you are at the end of the line, cut the entire   line.                                        |
| ~C-k~ | Cut the line from the current position to the end of the line, adding it to the clipboard.       |
|       | If you are at the beginning of the line, cut the entire line.                                    |
| ~C-w~ | Delete the word before the cursor, adding it to the clipboard.                                   |
| ~C-y~ | Paste the last thing from the clipboard that you cut recently                                    |
|       | (undo the last delete at the current cursor position).                                           |
| ~M-t~ | Swap the last two words before the cursor.                                                       |
| ~M-l~ | Make lowercase from cursor to end of word.                                                       |
| ~M-u~ | Make uppercase from cursor to end of word.                                                       |
| ~M-c~ | Capitalize to end of word starting at cursor (whole word if cursor is at the beginning of word). |
| ~M-d~ | Delete to end of word starting at cursor (whole word if cursor is at the beginning of word).     |
| ~C-t~ | Swap the last two characters before the cursor.                                                  |

*** History Access

| ~C-r~ | Lets you search through previously used commands.                                                   |
| ~C-g~ | Leave history searching mode without running a command.                                             |
| ~C-j~ | Lets you copy current matched command to command line without running it,                           |
|       | allowing you to make modifications before running the command.                                       |
| ~M-r~ | Revert any changes to a command you’ve pulled from your history, if you’ve edited it.               |
| ~C-p~ | Shows last executed command, i.e. walk back through the command history (Similar to up arrow).      |
| ~C-n~ | Shows next executed command, i.e. walk forward through the command history (Similar to down arrow). |

*** Terminal Control

| ~C-l~     | Clears the screen, similar to the clear command.                                                  |
| ~C-s~     | Stop all output to the screen. This is useful when running commands with lots of long output.     |
|           | But this doesn't stop the running command.                                                        |
| ~C-q~     | Resume output to the screen after stopping it with ~C-s~.                                          |
| ~C-c~     | End currently running process and return the prompt.                                              |
| ~C-d~     | Log out of the current shell session, similar to the exit or logout command.                      |
|           | In some commands, acts as End of File signal to indicate that a file end has been reached.         |
| ~C-z~     | Suspends (pause) currently running foreground process, which returns shell prompt.                |
|           | You can then use ~bg~ command allowing that process to run in the background.                       |
|           | To again bring that process to foreground, use ~fg~ command.                                        |
|           | To view all background processes, use ~jobs~ command.                                               |
| ~Tab~     | Auto-complete files and directory names.                                                           |
| ~Tab Tab~ | Shows all possibilities, when typed characters doesn't uniquely match to a file or directory name. |


*** Special Characters

| ~C-h~         | Same as Backspace.                             |
| ~C-j~         | Same as Return (historically Line Feed).       |
| ~C-m~         | Same as Return (historically Carriage Return). |
| ~C-i~         | Same as Tab.                                   |
| ~C-g~         | Bell Character.                                |
| ~C-@~         | Null Character.                                |
| ~Esc Deadkey~ | equivalent to the Alt modifier.                 |

*** Close Terminal

| ~C-w~    | To close terminal tab.     |
| ~C-s  q~ | To close entire terminal.  |

   Alternatively, you can switch to the vi keybindings in bash using ~set -o
   vi~. Use ~set -o~ emacs to switch back to the emacs keybindings.

**  Section 1.2: File Management Commands

   Linux uses some conventions for present and parent directories. This can be a
   little confusing for beginners.

   Whenever you are in a terminal in Linux, you will be in what is called the
   current working directory. Often your command prompt will display either the
   full working directory, or just the last part of that directory. Your prompt
   could look like one of the following:

#+begin_src bash
  user@host ~/somedir $
  user@host somedir $
  user@host /home/user/somedir $
#+end_src

   which says that your current working directory is ~/home/user/somedir~.

   In Linux ~..~ represents the parent directory and ~.~ represents the current
   directory.

   Therefore, if the current directory is ~/home/user/somedir~, then ~cd
   ../somedir~ will not change the working directory.

   The table below lists some of the most used file management commands

*** Directory navigation

| ~pwd~   | Get the full path of the current working directory. |
| ~cd -~  | Navigate to the last directory you were working in. |
| ~cd ~~  | Navigate to the current user's home directory.      |
| ~cd ..~ | Go to the parent directory of current directory.    |

*** Listing files inside a directory

| ~ls -l~           | List the files and directories in the current directory in long (table) format        |
|                   | (It is recommended to use -l  with ls for better readability).                        |
| ~ls -ld <dir>~ | List information about the directory <dir> instead of its contents.                |
| ~ls -a~           | List all the files including the hidden ones                                          |
|                   | (File names starting with a . are hidden files in Linux).                             |
| ~ls -F~           | Appends a symbol at the end of a file name to indicate its type                       |
|                   | (* means executable, / means  directory, @ means symbolic link,                       |
|                   | = means socket, ¦ means named pipe, > means door).                                    |
| ~ls -lt~          | List the files sorted by last modified time with most recently modified files         |
|                   | showing at the top (remember -l option provides the long format).                     |
| ~ls -lh~          | List the file sizes in human readable format.                                         |
| ~ls -lR~          | Shows all subdirectories recursively.                                                 |
| ~tree~            | Will generate a tree representation of the file system starting from the current dir. |

*** File/directory create, copy and remove

| ~cp -p src dest~         | Will copy the file from source to destination. -p stands for preservation.                                                                                                      |
|                          | It  preserves the original attributes of file while copying like file owner, timestamp, group, permissions etc.                                                                 |
| ~cp -R src_dir dest_dir~ | Will copy source directory to specified destination recursively.                                                                                                                |
| ~mv file1 file2~         | In Linux there is no rename command as such. Hence mv moves/renames the file1 to file2.                                                                                         |
| ~rm -i <file>~           | Asks you before every file removal for confirmation.                                                                                                                            |
|                          | IF YOU ARE A NEW USER TO LINUX COMMAND LINE, YOU SHOULD ALWAYS USE. You can specify multiple files.                                                                             |
| ~rm -R <dir>~            | Will remove the directory <dir> recursively.                                                                                                                                    |
| ~rm -rf <dir>~           | Will remove the directory dir recursively, ignoring non-existent files and will never prompt for anything. BE CAREFUL USING THIS COMMAND! You can specify multiple directories. |
| ~rmdir <dir>~            | Will remove the directory <dir>, if it's empty. This command can only remove empty directories.                                                                                 |
| ~mkdir <dir>~            | Create a directory <dir>.                                                                                                                                                       |
| ~mkdir -p <dir>/<dir>~   | Create a directory hierarchy. Create parent directories as needed, if they don't exist. You can specify multiple directories.                                                   |
| ~touch <file>~           | Create a file <file>, if it doesn't exist, otherwise change the timestamp of the file to current time.                                                                          |

*** File/directory permissions and groups

| ~chmod <specification> <file>~   | Change the file permissions. Specifications = u user, g group, o other, + add permission, - remove, r read, w write,x execute.                                                     |
| ~chmod -R <specification> <dir>~ | Change the permissions of a directory recursively. To change permission of a directory and everything within that directory, use this command.                                     |
| ~chmod go=+r <file>~             | Add read permission for the owner and the group.                                                                                                                                   |
| ~chmod a +rwx <file>~            | Allow all users to read, write or execute <file>.                                                                                                                                  |
| ~chmod go -r <file>~             | Remove read permission from the group and others.                                                                                                                                  |
| ~chown owner1 <file>~            | Change ownership of a file to user owner1.                                                                                                                                         |
| ~chgrp grp_owner <file>~         | Change primary group ownership of file <file> to group grp_owner.                                                                                                                  |
| ~chgrp -R grp_owner <dir>~       | Change primary group ownership of directory <dir> to group grp_owner recursively. To change group ownership of a directory and everything within that directory, use this command. |

** Section 1.3: Hello World

   Type the following code into your terminal, then press Enter:

#+begin_src bash
  echo "Hello World"
#+end_src

   This will produce the following output:

#+begin_src bash
  Hello World Section
#+end_src

** 1.4: Basic Linux Utilities

   Linux has a command for almost any tasks and most of them are intuitive and
   easily interpreted.

*** Getting Help in Linux

| man <name>                   | Read the manual page of <name>.                                                                                                                         |
| man <section> <name>         | Read the manual page of <name>, related to the given section.                                                                                           |
| man -k <editor>              | Output all the software whose man pages contain <editor> keyword.                                                                                       |
| man -K <keyword>             | Outputs all man pages containing <keyword> within them.                                                                                                 |
| apropos <editor              | >Output all the applications whose one line description matches the word editor. When not able to recall the name of the application, use this command. |
| help                         | In Bash shell, this will display the list of all available bash commands.                                                                               |
| help <name>                  | In Bash shell, this will display the info about the <name> bash command.                                                                                |
| info <name>                  | View all the information about <name>.                                                                                                                  |
| dpkg -l                      | Output a list of all installed packages on a Debian-based system.                                                                                       |
| dpkg -L packageName          | Will list out the files installed and path details for a given package on Debian.                                                                        |
| dpkg -l ¦ grep -i <edit>     | Return all .deb installed packages with <edit> irrespective of cases.                                                                                   |
| less /var/lib/dpkg/available | Return descriptions of all available packages.                                                                                                          |
| whatis vim                   | List a one-line description of vim.                                                                                                                     |
| <command-name> --help        | Display usage information about the <tool-name>. Sometimes command -h also works, but not for all commands.                                             |

| hostname    | Display hostname of the system.                                                                                        |
| hostname -f | Displays Fully Qualified Domain Name (FQDN) of the system.                                                              |
| passwd      | Change password of current user.                                                                                       |
| whoami      | Username of the users logged in at the terminal.                                                                       |
| who         | List of all the users currently logged in as a user.                                                                   |
| w           | Display current system status, time, duration, list of users currently logged in on system and other user information. |
| last        | Who recently used the system.                                                                                          |
| last root   | When was the last time root logged in as user.                                                                         |
| lastb       | Shows all bad login attempts into the system.                                                                          |
| chmod       | Changing permissions - read,write,execute of a file or directory.                                                       |

| top        | List all processes sorted by their current system resource usage. Displays a continually updated display of processes (By default 3 seconds). Use q key to exit top. |
| ps         | List processes currently running on current shell session                                                                                                            |
| ps -u root | List all of the processes and commands root is running                                                                                                               |
| ps aux     | List all the processes by all users on the current system                                                                                                            |

** Section 1.5: Searching for files by patterns in name/contents

   A common and task of someone using the Linux Command Line (shell) is to
   search for files/directories with a certain name or containing certain text.
   There are 2 commands you should familiarise yourself with in order to
   accomplish this:

*** Find files by name

#+begin_src bash
  find /var/www -name '*.css'
#+end_src

   This will print out the full path/<file> to all files under /var/www that end
   in .css.

   Example output:

#+begin_src bash
  /var/www/html/text-cursor.css
  /var/www/html/style.css
#+end_src

   For more info:

#+begin_src bash
  man find
#+end_src

*** Find files containing text

#+begin_src bash
  grep font /var/www/html/style.css
#+end_src

   This will print all lines containing the pattern font in the specified file.

   Example output:

#+begin_src bash
  font-weight: bold;
  font-family: monospace;
#+end_src

   Another example:

#+begin_src bash
  grep font /var/www/html/
#+end_src

   This doesn't work as you'd hoped. You get:

#+begin_src bash
  grep: /var/www/html/: Is a directory
#+end_src

   You need to grep recursively to make it work, using the -R option:

#+begin_src bash
  grep -R font /var/www/html/
#+end_src

   Hey nice! Check out the output of this one:

#+begin_src bash
/var/www/html/admin/index.php: echo '<font color=red><b>Error: no dice</b></font><br/>';
/var/www/html/admin/index.php: echo '<font color=red><b>Error: try again</b></font><br/>';
/var/www/html/style.css: font-weight: bold;
/var/www/html/style.css: font-family: monospace;
#+end_src

   Notice that when grep is matching multiple files, it prefixes the matched lines
   with the filenames. You can use the - h option to get rid of that, if you
   want.

   For more info:

#+begin_src bash
  man grep
#+end_src

** Section 1.6: File Manipulation

   Files and directories (another name for folders) are at the heart of Linux,
   so being able to create, view, move, and delete them from the command line is
   very important and quite powerful. These file manipulation commands allow you
   to perform the same tasks that a graphical file explorer would perform.

   Create an empty text file called myFile:

#+begin_src bash
  touch myFile
#+end_src

   Rename myFile to myFirstFile:

#+begin_src bash
  mv myFile myFirstFile
#+end_src

   View the contents of a file:

#+begin_src bash
  cat myFirstFile
#+end_src

   View the content of a file with pager (one screenful at a time):

#+begin_src bash
  less myFirstFile
#+end_src

   View the first several lines of a file:

#+begin_src bash
  head myFirstFile
#+end_src

   View the last several lines of a file:

#+begin_src bash
  tail myFirstFile
#+end_src

   Edit a file:

#+begin_src bash
  vi myFirstFile
#+end_src

   See what files are in your current working directory:

#+begin_src bash
  ls
#+end_src

   Create an empty directory called myFirstDirectory:

#+begin_src bash
  mkdir myFirstDirectory
#+end_src

   Create multi path directory: (creates two directories, src and
   myFirstDirectory)

#+begin_src bash
  mkdir -p src/myFirstDirectory
#+end_src

   Move the file into the directory:

#+begin_src bash
  mv myFirstFile myFirstDirectory/ 
#+end_src

   You can also rename the file:

#+begin_src bash
  user@linux-computer:~$ mv myFirstFile secondFileName
#+end_src

   Change the current working directory to myFirstDirectory:

#+begin_src bash
  cd myFirstDirectory
#+end_src

   Delete a file:

#+begin_src bash
  rm myFirstFile
#+end_src

   Move into the parent directory (which is represented as ..):

#+begin_src bash
  cd ..
#+end_src

   Delete an empty directory:

#+begin_src bash
  rmdir myFirstDirectory
#+end_src

   Delete a non-empty directory (i.e. contains files and/or other directories):

#+begin_src bash
  rm -rf myFirstDirectory
#+end_src

   Make note that when deleting directories, that you delete ./ not / that will
   wipe your whole filesystem.

** Section 1.7: File/Directory details

   The ls command has several options that can be used together to show more
   information.

   Details/Rights

   The l option shows the file permissions, size, and last modified date. So if
   the root directory contained a dir called test and a file someFile the
   command:

#+begin_src bash
  user@linux-computer:~$ ls -l
#+end_src

    Would output something like

#+begin_src bash
  -rw-r--r-- 1 user users 70 Jul 22 13:36 someFile.
  drwxrwxrwx 2 user users 4096 Jul 21 07:18 test
#+end_src

   The permissions are in format of drwxrwxrwx. The first character represents
   the file type d if it's a directory - otherwise. The next three rwx are the
   permissions the user has over the file, the next three are the permissions the
   group has over the file, and the last three are the permissions everyone else
   has over the file.

   The r of rwx stands for if a file can be read, the w represents if the file can
   be modified, and the x stands for if the file can be executed. If any
   permission isn't granted a - will be in place of r, w, or x.

   So from above user can read and modify someFile.txt but the group has only
   read-only rights.

   To change rights you can use the chmod ### fileName command if you have sudo
   rights. r is represented by a value of 4, w is represented by 2, and x is
   represented by a 1. So if only you want to be able to modify the contents to
   the test directory

#+begin_src bash
  Owner rwx = 4+2+1 = 7
  Group r-x = 4+0+1 = 5
  Other r-x = 4+0+1 = 5
#+end_src

   So the whole command is

#+begin_src bash
  chmod 755 test
#+end_src

   Now doing a ls -l would show something like

#+begin_src bash
  drwxr-xr-x 2 user users 4096 Jul 21 07:20 test
#+end_src

   *Readable Size*

   Used in conjunction with the l option the h option shows file sizes that are
   human readable. Running

#+begin_src bash
  user@linux-computer:~$ ls -lh
#+end_src

   Would output:

#+begin_src bash
  total 4166
  -rw-r--r-- 1 user users 70 Jul 22 13:36 someFile.txt
  drwxrwxrwx 2 user users 4.0K Jul 21 07:18 test
#+end_src

   *Hidden*

   To view hidden files use the a option. For example

#+begin_src bash
  user@linux-computer:~$ ls -a
#+end_src

   Might list

#+begin_src bash
  .profile
  someFile.txt
  test
#+end_src

   *Total Directory Size*

   To view the size of the current directory use the s option (the h option can
   also be used to make the size more readable).

#+begin_src bash
  user@linux-computer:~$ ls -s
#+end_src

   Outputs

#+begin_src bash
  total 4166
  someFile.txt test
#+end_src

*** Recursive View

    Lets say test directory had a file anotherFile and you wanted to see it from
    the root folder, you could use the R option which would list the recursive
    tree.

#+begin_src bash
  user@linux-computer:~$ ls -R
#+end_src

   Outputs

#+begin_src bash
  .:
  someFile.txt test

  ./test:
  anotherFile
#+end_src
